# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/down/all/down.rbi
#
# down-4.2.1

module Down
  def backend(value = nil); end
  def download(*args, &block); end
  def open(*args, &block); end
  def self.backend(value = nil); end
  def self.download(*args, &block); end
  def self.open(*args, &block); end
end
class Down::ChunkedIO
  def cache; end
  def chunks_depleted?; end
  def chunks_fiber; end
  def close; end
  def closed?; end
  def data; end
  def data=(arg0); end
  def each_chunk; end
  def encoding; end
  def encoding=(arg0); end
  def eof?; end
  def find_encoding(encoding); end
  def gets(separator_or_limit = nil, limit = nil); end
  def initialize(chunks:, size: nil, on_close: nil, data: nil, rewindable: nil, encoding: nil); end
  def inspect; end
  def pos; end
  def read(length = nil, outbuf = nil); end
  def readpartial(length = nil, outbuf = nil); end
  def retrieve_chunk; end
  def rewind; end
  def rewindable?; end
  def size; end
  def size=(arg0); end
end
class Down::Error < StandardError
end
class Down::TooLarge < Down::Error
end
class Down::NotFound < Down::Error
end
class Down::InvalidUrl < Down::NotFound
end
class Down::TooManyRedirects < Down::NotFound
end
class Down::ResponseError < Down::NotFound
  def initialize(message, response: nil); end
  def response; end
end
class Down::ClientError < Down::ResponseError
end
class Down::ServerError < Down::ResponseError
end
class Down::ConnectionError < Down::NotFound
end
class Down::TimeoutError < Down::ConnectionError
end
class Down::SSLError < Down::NotFound
end
class Down::Backend
  def self.download(*args, &block); end
  def self.open(*args, &block); end
end
class Down::NetHttp < Down::Backend
  def create_net_http(uri, options); end
  def download(url, options = nil); end
  def ensure_tempfile(io, extension); end
  def ensure_uri(url); end
  def initialize(options = nil); end
  def net_http_request(uri, options, follows_remaining: nil, &block); end
  def open(url, options = nil); end
  def open_uri(uri, options, follows_remaining: nil); end
  def request_error!(exception); end
  def response_error!(response); end
  def stream_body(response, &block); end
end
module Down::NetHttp::DownloadedFile
  def content_type; end
  def filename_from_content_disposition; end
  def filename_from_uri; end
  def original_filename; end
end
