# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google_drive/all/google_drive.rbi
#
# google_drive-3.0.4

module GoogleDrive
  def self.login_with_oauth(client_or_access_token, proxy = nil); end
  def self.saved_session(config = nil, proxy = nil, client_id = nil, client_secret = nil); end
end
module GoogleDrive::Util
  def concat_url(url, piece); end
  def construct_and_query(args); end
  def construct_query(arg); end
  def convert_params(params); end
  def delegate_api_methods(obj, api_obj, exceptions = nil); end
  def encode_query(params); end
  def get_singleton_class(obj); end
  def h(str); end
  def self.concat_url(url, piece); end
  def self.construct_and_query(args); end
  def self.construct_query(arg); end
  def self.convert_params(params); end
  def self.delegate_api_methods(obj, api_obj, exceptions = nil); end
  def self.encode_query(params); end
  def self.get_singleton_class(obj); end
  def self.h(str); end
end
class GoogleDrive::ApiClientFetcher
  def drive; end
  def initialize(authorization, client_options, request_options); end
  def request_raw(method, url, data, extra_header, _auth); end
  def sheets; end
end
class GoogleDrive::ApiClientFetcher::Response
  def body; end
  def code; end
  def initialize(code, body); end
end
class GoogleDrive::Error < RuntimeError
end
class GoogleDrive::ResponseCodeError < GoogleDrive::Error
  def body; end
  def code; end
  def initialize(code, body, method, url); end
end
class GoogleDrive::AuthenticationError < GoogleDrive::ResponseCodeError
end
class GoogleDrive::ListRow
  def ==(other); end
  def ===(other); end
  def [](key); end
  def []=(key, value); end
  def assoc(*args, &block); end
  def clear; end
  def each(*args, &block); end
  def each_key(*args, &block); end
  def each_pair(*args, &block); end
  def each_value(*args, &block); end
  def eql?(other); end
  def fetch(*args, &block); end
  def flatten(*args, &block); end
  def has_key?(key); end
  def hash(*args, &block); end
  def include?(key); end
  def initialize(list, index); end
  def input_value(key); end
  def inspect; end
  def invert(*args, &block); end
  def key(*args, &block); end
  def key?(key); end
  def keys(*args, &block); end
  def length(*args, &block); end
  def member?(key); end
  def merge!(hash); end
  def merge(*args, &block); end
  def numeric_value(key); end
  def rassoc(*args, &block); end
  def reject(*args, &block); end
  def replace(hash); end
  def select(*args, &block); end
  def size(*args, &block); end
  def sort(*args, &block); end
  def to_a(*args, &block); end
  def to_hash; end
  def update(hash); end
  def values(*args, &block); end
  def values_at(*args, &block); end
  extend Forwardable
  include Enumerable
end
class GoogleDrive::List
  def [](index); end
  def []=(index, hash); end
  def each(&_block); end
  def get(index, key); end
  def initialize(worksheet); end
  def input_value(index, key); end
  def key_to_col(key); end
  def keys; end
  def keys=(ary); end
  def numeric_value(index, key); end
  def push(hash); end
  def set(index, key, value); end
  def size; end
  def to_hash_array; end
  include Enumerable
end
class GoogleDrive::Worksheet
  def [](*args); end
  def []=(*args); end
  def add_request(request); end
  def cell_name_to_row_col(cell_name); end
  def cells; end
  def cells_feed_url; end
  def copy_to(spreadsheet_or_id); end
  def csv_export_url; end
  def delete; end
  def delete_rows(row_num, rows); end
  def dirty?; end
  def duplicate; end
  def export_as_file(path); end
  def export_as_string; end
  def extended_value_to_str(extended_value); end
  def format_cells(top_row, left_col, num_rows, num_cols, format, fields); end
  def gid; end
  def human_url; end
  def index; end
  def index=(index); end
  def initialize(session, spreadsheet, properties); end
  def input_value(*args); end
  def insert_rows(row_num, rows); end
  def inspect; end
  def list; end
  def list_feed_url; end
  def max_cols; end
  def max_cols=(cols); end
  def max_rows; end
  def max_rows=(rows); end
  def merge_cells(top_row, left_col, num_rows, num_cols, merge_type: nil); end
  def num_cols; end
  def num_rows; end
  def numeric_value(*args); end
  def parse_cell_args(args); end
  def properties; end
  def reload; end
  def reload_cells; end
  def rows(skip = nil); end
  def save; end
  def set_background_color(top_row, left_col, num_rows, num_cols, background_color); end
  def set_number_format(top_row, left_col, num_rows, num_cols, pattern, type: nil); end
  def set_properties(properties); end
  def set_text_alignment(top_row, left_col, num_rows, num_cols, horizontal: nil, vertical: nil); end
  def set_text_format(top_row, left_col, num_rows, num_cols, bold: nil, italic: nil, strikethrough: nil, font_size: nil, font_family: nil, foreground_color: nil); end
  def sheet_id; end
  def spreadsheet; end
  def synchronize; end
  def title; end
  def title=(title); end
  def update_borders(top_row, left_col, num_rows, num_cols, borders); end
  def update_cells(top_row, left_col, darray); end
  def update_cells_from_api_sheet(api_sheet); end
  def updated; end
  def v4_range_object(top_row, left_col, num_rows, num_cols); end
  def validate_cell_value(value); end
  def worksheet_feed_entry; end
  def worksheet_feed_id; end
  def worksheet_feed_url; end
  include GoogleDrive::Util
end
module GoogleDrive::Worksheet::Colors
end
class GoogleDrive::AclEntry
  def acl; end
  def additional_roles; end
  def allow_file_discovery; end
  def api_permission; end
  def api_permission=(arg0); end
  def convert_params(orig_params); end
  def domain; end
  def email_address; end
  def id; end
  def initialize(params_or_api_permission, acl = nil); end
  def inspect; end
  def params; end
  def role; end
  def role=(role); end
  def scope; end
  def scope_type; end
  def type; end
  def value; end
  def with_key; end
  def with_link; end
  include GoogleDrive::Util
end
class GoogleDrive::Acl
  def [](*args, &block); end
  def delete(entry); end
  def each(*args, &block); end
  def initialize(session, file); end
  def inspect; end
  def push(params_or_entry, options = nil); end
  def size(*args, &block); end
  def update_role(entry); end
  extend Forwardable
  include Enumerable
  include GoogleDrive::Util
end
class GoogleDrive::File
  def acl(params = nil); end
  def acl_feed_url; end
  def api_file; end
  def available_content_types; end
  def copy(title, file_properties = nil); end
  def delete(permanent = nil); end
  def document_feed_url; end
  def download_to_file(path, params = nil); end
  def download_to_io(io, params = nil); end
  def download_to_string(params = nil); end
  def duplicate(title, file_properties = nil); end
  def export_as_file(path, format = nil); end
  def export_as_string(format); end
  def export_to_dest(dest, format); end
  def export_to_io(io, format); end
  def human_url; end
  def initialize(session, api_file); end
  def inspect; end
  def name(params = nil); end
  def reload_metadata; end
  def rename(title); end
  def resource_id; end
  def resource_type; end
  def title(params = nil); end
  def title=(title); end
  def update_from_file(path, params = nil); end
  def update_from_io(io, params = nil); end
  def update_from_string(content, params = nil); end
  extend Forwardable
  include GoogleDrive::Util
end
class GoogleDrive::Spreadsheet < GoogleDrive::File
  def add_worksheet(title, max_rows = nil, max_cols = nil, index: nil); end
  def batch_update(requests); end
  def document_feed_url; end
  def download_to_file(_path, _params = nil); end
  def download_to_io(_io, _params = nil); end
  def download_to_string(_params = nil); end
  def key; end
  def spreadsheet_feed_url; end
  def worksheet_by_gid(sheet_id); end
  def worksheet_by_sheet_id(sheet_id); end
  def worksheet_by_title(title); end
  def worksheets; end
  def worksheets_feed_url; end
  include GoogleDrive::Util
end
class GoogleDrive::Collection < GoogleDrive::File
  def add(file); end
  def collection_feed_url; end
  def contents(params = nil, &block); end
  def contents_url; end
  def create_file(title, file_properties = nil); end
  def create_spreadsheet(title, file_properties = nil); end
  def create_subcollection(title, file_properties = nil); end
  def create_subfolder(title, file_properties = nil); end
  def documents(params = nil, &block); end
  def file_by_name(title); end
  def file_by_name_with_type(title, type); end
  def file_by_title(title); end
  def file_by_title_with_type(title, type); end
  def files(params = nil, &block); end
  def files_with_type(type, params = nil, &block); end
  def remove(file); end
  def root?; end
  def spreadsheets(params = nil, &block); end
  def subcollection_by_title(title); end
  def subcollections(params = nil, &block); end
  def subfolder_by_name(title); end
  def subfolders(params = nil, &block); end
  def upload_from_file(path, title = nil, params = nil); end
  def upload_from_io(io, title = nil, params = nil); end
  def upload_from_string(content, title = nil, params = nil); end
  include GoogleDrive::Util
end
class GoogleDrive::Config
  def client_id; end
  def client_id=(arg0); end
  def client_secret; end
  def client_secret=(arg0); end
  def initialize(config_path); end
  def refresh_token; end
  def refresh_token=(arg0); end
  def save; end
  def scope; end
  def scope=(arg0); end
  def to_json; end
  def type; end
  def type=(arg0); end
end
class GoogleDrive::AccessTokenCredentials
  def access_token; end
  def apply!(headers); end
  def initialize(access_token); end
end
class GoogleDrive::Session
  def collection_by_id(id); end
  def collection_by_title(title); end
  def collection_by_url(url); end
  def collections(params = nil, &block); end
  def convert_response(response, response_type); end
  def create_collection(title, file_properties = nil); end
  def create_file(title, file_properties = nil); end
  def create_folder(title, file_properties = nil); end
  def create_spreadsheet(title = nil, file_properties = nil); end
  def drive; end
  def drive_service; end
  def execute_paged!(opts, &block); end
  def file_by_id(id); end
  def file_by_name(title); end
  def file_by_title(title); end
  def file_by_url(url); end
  def files(params = nil, &block); end
  def folder_by_id(id); end
  def folder_by_url(url); end
  def folders(params = nil, &block); end
  def folders_by_name(title); end
  def initialize(credentials_or_access_token, proxy = nil, client_options = nil, request_options = nil); end
  def inspect; end
  def on_auth_fail; end
  def on_auth_fail=(arg0); end
  def request(method, url, params = nil); end
  def root_collection; end
  def root_folder; end
  def self.from_access_token(access_token, client_options = nil, request_options = nil); end
  def self.from_config(config, options = nil); end
  def self.from_credentials(credentials, client_options = nil, request_options = nil); end
  def self.from_service_account_key(json_key_path_or_io, scope = nil, client_options = nil, request_options = nil); end
  def self.login_with_oauth(credentials_or_access_token, proxy = nil); end
  def self.new_dummy; end
  def sheets_service; end
  def spreadsheet_by_key(key); end
  def spreadsheet_by_name(title); end
  def spreadsheet_by_title(title); end
  def spreadsheet_by_url(url); end
  def spreadsheets(params = nil, &block); end
  def upload_from_file(path, title = nil, params = nil); end
  def upload_from_io(io, title = nil, params = nil); end
  def upload_from_source(source, title, params = nil); end
  def upload_from_string(content, title = nil, params = nil); end
  def url_to_id(url); end
  def worksheet_by_url(url); end
  def wrap_api_file(api_file); end
  extend GoogleDrive::Util
  include GoogleDrive::Util
end
