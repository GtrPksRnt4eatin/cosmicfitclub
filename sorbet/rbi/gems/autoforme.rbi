# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/autoforme/all/autoforme.rbi
#
# autoforme-1.7.0

module AutoForme
  def self.for(type, controller, opts = nil, &block); end
  def self.framework_class_for(type); end
  def self.model_class_for(type); end
  def self.register_framework(type, klass); end
  def self.register_model(type, klass); end
  def self.version; end
end
module AutoForme::OptsAttributes
  def opts_attribute(*meths); end
end
class AutoForme::Model
  def after_create(*args, &block); end
  def after_destroy(*args, &block); end
  def after_update(*args, &block); end
  def apply_name_method(nm, obj, type, request); end
  def associated_model_class(assoc); end
  def associated_object_display_name(assoc, request, obj); end
  def association_links(*args, &block); end
  def association_links_for(type, request); end
  def autocomplete_options(*args, &block); end
  def autocomplete_options_for(type, request); end
  def before_action(*args, &block); end
  def before_action_hook(type, request); end
  def before_create(*args, &block); end
  def before_destroy(*args, &block); end
  def before_edit(*args, &block); end
  def before_new(*args, &block); end
  def before_update(*args, &block); end
  def class_display_name(*args, &block); end
  def class_name; end
  def column_options(*args, &block); end
  def column_options_for(type, request, column); end
  def column_value(type, request, obj, column); end
  def columns(*args, &block); end
  def columns_for(type, request); end
  def default_object_display_name(obj); end
  def destroy(obj); end
  def display_name(*args, &block); end
  def display_name_for; end
  def eager(*args, &block); end
  def eager_for(type, request); end
  def eager_graph(*args, &block); end
  def eager_graph_for(type, request); end
  def edit_html(*args, &block); end
  def edit_html_for(obj, column, type, request); end
  def extract_column_options(opts, column, type, request); end
  def filter(*args, &block); end
  def filter_for; end
  def form_attributes(*args, &block); end
  def form_attributes_for(type, request); end
  def form_options(*args, &block); end
  def form_options_for(type, request); end
  def framework; end
  def handle_proc(v, *a); end
  def hook(type, request, obj); end
  def initialize(model, framework); end
  def inline_mtm_associations(*args, &block); end
  def inline_mtm_assocs(request); end
  def lazy_load_association_links(*args, &block); end
  def lazy_load_association_links?(type, request); end
  def limit_for(type, request); end
  def link; end
  def link_name(*args, &block); end
  def model; end
  def mtm_association_select_options(request); end
  def mtm_associations(*args, &block); end
  def new(params, request); end
  def normalize_mtm_associations(assocs); end
  def object_display_name(type, request, obj); end
  def opts; end
  def order(*args, &block); end
  def order_for(type, request); end
  def page_footer(*args, &block); end
  def page_footer_for(type, request); end
  def page_header(*args, &block); end
  def page_header_for(type, request); end
  def per_page(*args, &block); end
  def redirect(*args, &block); end
  def redirect_for; end
  def select_options(type, request); end
  def self.for(framework, type, model_class, &block); end
  def show_html(*args, &block); end
  def show_html_for(obj, column, type, request); end
  def supported_action?(type, request); end
  def supported_actions(*args, &block); end
  def supported_mtm_edit?(assoc, request); end
  def supported_mtm_update?(assoc, request); end
  def table_class(*args, &block); end
  def table_class_for(type, request); end
  extend AutoForme::OptsAttributes
end
class AutoForme::Framework
  def action_for(request); end
  def after_create(*args, &block); end
  def after_destroy(*args, &block); end
  def after_update(*args, &block); end
  def association_links(*args, &block); end
  def association_links_for(model, type, request); end
  def autocomplete_options(*args, &block); end
  def autocomplete_options_for(model, type, request); end
  def before_action(*args, &block); end
  def before_create(*args, &block); end
  def before_destroy(*args, &block); end
  def before_edit(*args, &block); end
  def before_new(*args, &block); end
  def before_update(*args, &block); end
  def column_options(*args, &block); end
  def columns(*args, &block); end
  def columns_for(model, type, request); end
  def controller; end
  def display_name(*args, &block); end
  def display_name_for(model); end
  def edit_html(*args, &block); end
  def edit_html_for(obj, column, type, request); end
  def filter(*args, &block); end
  def filter_for(model); end
  def form_attributes(*args, &block); end
  def form_attributes_for(model, type, request); end
  def form_options(*args, &block); end
  def form_options_for(model, type, request); end
  def handle_proc(v, *a); end
  def initialize(controller, opts = nil); end
  def inline_mtm_associations(*args, &block); end
  def inline_mtm_associations_for(model, request); end
  def lazy_load_association_links(*args, &block); end
  def lazy_load_association_links?(model, type, request); end
  def limit_for(model, type, request); end
  def model(model_class, &block); end
  def model_class(model_class); end
  def model_classes; end
  def model_type(*args, &block); end
  def models; end
  def mtm_associations(*args, &block); end
  def mtm_associations_for(model, request); end
  def opts; end
  def order(*args, &block); end
  def order_for(model, type, request); end
  def page_footer(*args, &block); end
  def page_footer_for(model, type, request); end
  def page_header(*args, &block); end
  def page_header_for(model, type, request); end
  def per_page(*args, &block); end
  def prefix; end
  def redirect(*args, &block); end
  def redirect_for(model); end
  def register_by_name(register = nil); end
  def register_by_name?; end
  def self.for(type, controller, opts = nil, &block); end
  def self.setup(controller, opts, &block); end
  def show_html(*args, &block); end
  def show_html_for(obj, column, type, request); end
  def supported_actions(*args, &block); end
  def supported_actions_for(model, request); end
  def table_class(*args, &block); end
  def table_class_for(model, type, request); end
  extend AutoForme::OptsAttributes
end
class AutoForme::Request
  def action_type; end
  def controller; end
  def env; end
  def id; end
  def method; end
  def model; end
  def params; end
  def path; end
  def post?; end
  def query_string; end
  def session; end
  def set_flash_notice(message); end
  def set_flash_now_error(message); end
  def set_id(path_id); end
end
class AutoForme::Action
  def association_class_link(mc, assoc); end
  def association_link(mc, assoc_obj); end
  def association_link_list(obj); end
  def association_links(obj); end
  def base_url_for(page); end
  def column_label_for(type, request, model, column); end
  def column_options_for(type, request, obj, column); end
  def csv(meth); end
  def edit_page(obj); end
  def form_attributes(attrs); end
  def form_opts; end
  def h(s); end
  def handle; end
  def handle_association_links; end
  def handle_autocomplete; end
  def handle_browse; end
  def handle_create; end
  def handle_delete; end
  def handle_destroy; end
  def handle_edit; end
  def handle_mtm_edit; end
  def handle_mtm_update; end
  def handle_new; end
  def handle_search; end
  def handle_show; end
  def handle_update; end
  def humanize(string); end
  def initialize(model, request); end
  def inline_mtm_edit_forms(obj); end
  def list_page(type, opts = nil); end
  def model; end
  def model_params; end
  def mtm_edit_remove(assoc, mc, obj, assoc_obj); end
  def new_page(obj, opts = nil); end
  def normalized_type; end
  def output_filename; end
  def output_type; end
  def page; end
  def params_association; end
  def redirect(type, obj); end
  def request; end
  def show_page(obj); end
  def subtype; end
  def supported?; end
  def tab_name(type); end
  def table_page(next_page, objs); end
  def table_pager(type, next_page); end
  def tabs; end
  def title; end
  def type; end
  def url_for(page); end
end
class AutoForme::Table
  def action; end
  def columns; end
  def h(s); end
  def initialize(action, objs); end
  def model; end
  def objs; end
  def request; end
  def to_s; end
  def type; end
end
class AutoForme::Error < StandardError
end
