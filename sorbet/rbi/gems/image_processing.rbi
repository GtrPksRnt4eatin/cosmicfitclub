# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/image_processing/all/image_processing.rbi
#
# image_processing-0.4.5

module ImageProcessing
end
module ImageProcessing::MiniMagick
  def _copy_to_tempfile(file); end
  def auto_orient!(image); end
  def auto_orient(image, *args, &block); end
  def convert!(image, format, page = nil, &block); end
  def convert(image, *args, &block); end
  def corrupted?(image); end
  def crop!(image, width, height, x_offset = nil, y_offset = nil, gravity: nil); end
  def crop(image, *args, &block); end
  def resample!(image, width, height); end
  def resample(image, *args, &block); end
  def resize_and_pad!(image, width, height, background: nil, gravity: nil); end
  def resize_and_pad(image, *args, &block); end
  def resize_to_fill!(image, width, height, gravity: nil); end
  def resize_to_fill(image, *args, &block); end
  def resize_to_fit!(image, width, height); end
  def resize_to_fit(image, *args, &block); end
  def resize_to_limit!(image, width, height); end
  def resize_to_limit(image, *args, &block); end
  def self._copy_to_tempfile(file); end
  def self.auto_orient!(image); end
  def self.auto_orient(image, *args, &block); end
  def self.convert!(image, format, page = nil, &block); end
  def self.convert(image, *args, &block); end
  def self.corrupted?(image); end
  def self.crop!(image, width, height, x_offset = nil, y_offset = nil, gravity: nil); end
  def self.crop(image, *args, &block); end
  def self.nondestructive_alias(name, original); end
  def self.resample!(image, width, height); end
  def self.resample(image, *args, &block); end
  def self.resize_and_pad!(image, width, height, background: nil, gravity: nil); end
  def self.resize_and_pad(image, *args, &block); end
  def self.resize_to_fill!(image, width, height, gravity: nil); end
  def self.resize_to_fill(image, *args, &block); end
  def self.resize_to_fit!(image, width, height); end
  def self.resize_to_fit(image, *args, &block); end
  def self.resize_to_limit!(image, width, height); end
  def self.resize_to_limit(image, *args, &block); end
  def self.with_minimagick(image); end
  def with_minimagick(image); end
end
