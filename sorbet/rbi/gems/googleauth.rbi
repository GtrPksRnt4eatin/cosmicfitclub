# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/googleauth/all/googleauth.rbi
#
# googleauth-0.6.2

module Signet
end
module Signet::OAuth2
end
class Signet::OAuth2::Client
  def apply!(a_hash, opts = nil); end
  def apply(a_hash, opts = nil); end
  def notify_refresh_listeners; end
  def on_refresh(&block); end
  def orig_fetch_access_token!(options = nil); end
  def retry_with_error(max_retry_count = nil); end
  def updater_proc; end
end
module Google
end
module Google::Auth
  def get_application_default(scope = nil, options = nil); end
  def self.get_application_default(scope = nil, options = nil); end
end
class Google::Auth::GCECredentials < Signet::OAuth2::Client
  def fetch_access_token(options = nil); end
  def self._unmemoized_on_gce?(options = nil); end
  def self.on_gce?(*args); end
end
module Google::Auth::CredentialsLoader
  def authorized_user_env_vars?; end
  def from_env(scope = nil); end
  def from_system_default_path(scope = nil); end
  def from_well_known_path(scope = nil); end
  def make_creds(*args); end
  def self.memoized_methods; end
  def service_account_env_vars?; end
  extend Memoist
end
class Google::Auth::ServiceAccountCredentials < Signet::OAuth2::Client
  def apply!(a_hash, opts = nil); end
  def initialize(options = nil); end
  def self.make_creds(options = nil); end
  def self.read_json_key(json_key_io); end
  extend Google::Auth::CredentialsLoader
end
class Google::Auth::ServiceAccountJwtHeaderCredentials
  def apply!(a_hash, opts = nil); end
  def apply(a_hash, opts = nil); end
  def initialize(options = nil); end
  def new_jwt_token(jwt_aud_uri, options = nil); end
  def self.make_creds(*args); end
  def self.read_json_key(json_key_io); end
  def updater_proc; end
  extend Google::Auth::CredentialsLoader
end
module Google::Auth::ScopeUtil
  def self.as_array(scope); end
  def self.normalize(scope); end
end
class Google::Auth::UserRefreshCredentials < Signet::OAuth2::Client
  def includes_scope?(required_scope); end
  def initialize(options = nil); end
  def revoke!(options = nil); end
  def self.make_creds(options = nil); end
  def self.read_json_key(json_key_io); end
  extend Google::Auth::CredentialsLoader
end
class Google::Auth::DefaultCredentials
  def self.determine_creds_class(json_key_io); end
  def self.make_creds(options = nil); end
  def self.read_creds; end
  extend Google::Auth::CredentialsLoader
end
class Google::Auth::ClientId
  def id; end
  def initialize(id, secret); end
  def secret; end
  def self.default; end
  def self.default=(arg0); end
  def self.from_file(file); end
  def self.from_hash(config); end
end
class Google::Auth::Credentials
  def audience(*args, &block); end
  def client; end
  def client=(arg0); end
  def client_options(options); end
  def init_client(keyfile); end
  def initialize(keyfile, options = nil); end
  def issuer(*args, &block); end
  def scope(*args, &block); end
  def self.default(options = nil); end
  def self.from_application_default(scope); end
  def self.from_default_paths(scope); end
  def self.from_json_vars(scope); end
  def self.from_path_vars(scope); end
  def signing_key(*args, &block); end
  def stringify_hash_keys(hash); end
  def token_credential_uri(*args, &block); end
  def updater_proc(*args, &block); end
  def verify_keyfile_exists!(keyfile); end
  def verify_keyfile_provided!(keyfile); end
  extend Forwardable
end
class Google::Auth::UserAuthorizer
  def get_and_store_credentials_from_code(options = nil); end
  def get_authorization_url(options = nil); end
  def get_credentials(user_id, scope = nil); end
  def get_credentials_from_code(options = nil); end
  def initialize(client_id, scope, token_store, callback_uri = nil); end
  def monitor_credentials(user_id, credentials); end
  def redirect_uri_for(base_url); end
  def revoke_authorization(user_id); end
  def store_credentials(user_id, credentials); end
  def stored_token(user_id); end
end
class Google::Auth::WebUserAuthorizer < Google::Auth::UserAuthorizer
  def get_authorization_url(options = nil); end
  def get_credentials(user_id, request, scope = nil); end
  def handle_auth_callback(user_id, request); end
  def initialize(client_id, scope, token_store, callback_uri = nil); end
  def self.default; end
  def self.default=(arg0); end
  def self.extract_callback_state(request); end
  def self.handle_auth_callback_deferred(request); end
  def self.validate_callback_state(state, request); end
end
class Google::Auth::WebUserAuthorizer::CallbackApp
  def call(env); end
  def self.call(env); end
end
class Google::Auth::TokenStore
  def delete(_id); end
  def load(_id); end
  def self.default; end
  def self.default=(arg0); end
  def store(_id, _token); end
end
module Google::Auth::Stores
end
class Google::Auth::Stores::FileTokenStore < Google::Auth::TokenStore
  def delete(id); end
  def initialize(options = nil); end
  def load(id); end
  def store(id, token); end
end
