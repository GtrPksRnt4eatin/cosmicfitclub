# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/backports/all/backports.rbi
#
# backports-3.17.1

module Backports
  def self.alias_method(mod, new_name, old_name); end
  def self.alias_method_chain(mod, target, feature); end
  def self.deprecate(kind, msg); end
  def self.frown_upon(kind, msg); end
  def self.make_block_optional(mod, *methods); end
  def self.require_relative_dir; end
  def self.warn(kind, msg); end
  def self.warned; end
  def self.warned=(arg0); end
end
module Backports::StdLib
  def self.extend_relative(relative_dir = nil); end
  def self.extended_lib; end
  def self.extended_lib=(arg0); end
end
class Backports::StdLib::LoadedFeatures
  def include?(feature); end
  def self.mark_as_loaded(feature); end
end
module Kernel
  def require_with_backports(lib); end
  def require_without_backports(arg0); end
end
class Hash
  def reverse_merge!(other_hash); end
  def reverse_merge(other_hash); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
end
class File < IO
end
module File::Constants
end
class Set
end
class OpenStruct
end
module Enumerable
end
class Array
end
class Object < BasicObject
  def try(*a, &b); end
end
class NilClass
  def try(*args); end
end
class Module
  def alias_method_chain(target, feature, &block); end
end
class String
  def camelize(first_letter = nil); end
  def constantize; end
  def dasherize; end
  def demodulize; end
  def underscore; end
end
