# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/twilio-ruby/all/twilio-ruby.rbi
#
# twilio-ruby-5.26.0

module Twilio
  def self.account_sid(*args, &block); end
  def self.auth_token(*args, &block); end
  def self.configuration; end
  def self.configure(&block); end
  def self.deserialize_iso8601_date(date); end
  def self.deserialize_iso8601_datetime(date); end
  def self.deserialize_rfc2822(date); end
  def self.flatten(map, result = nil, previous = nil); end
  def self.prefixed_collapsible_map(map, prefix); end
  def self.serialize_iso8601_date(date); end
  def self.serialize_iso8601_datetime(date); end
  def self.serialize_list(input_list); end
  def self.serialize_object(object); end
  extend SingleForwardable
end
module Rack
end
class Rack::TwilioWebhookAuthentication
  def call(env); end
  def initialize(app, auth_token, *paths, &auth_token_lookup); end
end
module Twilio::Util
  def get_string(obj); end
  def url_encode(hash); end
end
module Twilio::JWT
end
class Twilio::JWT::BaseJWT
  def _generate_headers; end
  def _generate_payload; end
  def headers; end
  def initialize(secret_key: nil, issuer: nil, subject: nil, nbf: nil, ttl: nil, valid_until: nil); end
  def payload; end
  def to_jwt; end
  def to_s; end
end
module Twilio::JWT::AccessTokenGrant
  def _generate_payload; end
  def _key; end
end
class Twilio::JWT::AccessToken < Twilio::JWT::BaseJWT
  def _generate_headers; end
  def _generate_payload; end
  def account_sid; end
  def account_sid=(arg0); end
  def add_grant(grant); end
  def grants; end
  def grants=(arg0); end
  def identity; end
  def identity=(arg0); end
  def initialize(account_sid, signing_key_sid, secret, grants = nil, identity: nil, nbf: nil, ttl: nil, valid_until: nil); end
  def nbf; end
  def nbf=(arg0); end
  def secret; end
  def secret=(arg0); end
  def signing_key_id; end
  def signing_key_id=(arg0); end
  def ttl; end
  def ttl=(arg0); end
  def valid_until; end
  def valid_until=(arg0); end
end
class Twilio::JWT::AccessToken::ChatGrant
  def _generate_payload; end
  def _key; end
  def deployment_role_sid; end
  def deployment_role_sid=(arg0); end
  def endpoint_id; end
  def endpoint_id=(arg0); end
  def push_credential_sid; end
  def push_credential_sid=(arg0); end
  def service_sid; end
  def service_sid=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::IpMessagingGrant
  def _generate_payload; end
  def _key; end
  def deployment_role_sid; end
  def deployment_role_sid=(arg0); end
  def endpoint_id; end
  def endpoint_id=(arg0); end
  def push_credential_sid; end
  def push_credential_sid=(arg0); end
  def self._deprecated_new(*arg0); end
  def self.new(*args, &block); end
  def service_sid; end
  def service_sid=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::VoiceGrant
  def _generate_payload; end
  def _key; end
  def endpoint_id; end
  def endpoint_id=(arg0); end
  def incoming_allow; end
  def incoming_allow=(arg0); end
  def outgoing_application_params; end
  def outgoing_application_params=(arg0); end
  def outgoing_application_sid; end
  def outgoing_application_sid=(arg0); end
  def push_credential_sid; end
  def push_credential_sid=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::SyncGrant
  def _generate_payload; end
  def _key; end
  def endpoint_id; end
  def endpoint_id=(arg0); end
  def service_sid; end
  def service_sid=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::ConversationsGrant
  def _generate_payload; end
  def _key; end
  def configuration_profile_sid; end
  def configuration_profile_sid=(arg0); end
  def self._deprecated_new(*arg0); end
  def self.new(*args, &block); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::VideoGrant
  def _generate_payload; end
  def _key; end
  def room; end
  def room=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
class Twilio::JWT::AccessToken::TaskRouterGrant
  def _generate_payload; end
  def _key; end
  def role; end
  def role=(arg0); end
  def worker_sid; end
  def worker_sid=(arg0); end
  def workspace_sid; end
  def workspace_sid=(arg0); end
  include Twilio::JWT::AccessTokenGrant
end
module Twilio::JWT::Scope
  def _generate_payload; end
end
class Twilio::JWT::ClientCapability < Twilio::JWT::BaseJWT
  def _generate_payload; end
  def account_sid; end
  def account_sid=(arg0); end
  def add_scope(scope); end
  def auth_token; end
  def auth_token=(arg0); end
  def client_name; end
  def client_name=(arg0); end
  def initialize(account_sid, auth_token, scopes: nil, nbf: nil, ttl: nil, valid_until: nil); end
  def scopes; end
  def scopes=(arg0); end
end
class Twilio::JWT::ClientCapability::IncomingClientScope
  def _generate_payload; end
  def initialize(client_name); end
  include Twilio::JWT::Scope
end
class Twilio::JWT::ClientCapability::OutgoingClientScope
  def _generate_payload; end
  def initialize(application_sid, client_name = nil, params = nil); end
  include Twilio::JWT::Scope
end
class Twilio::JWT::ClientCapability::EventStreamScope
  def _generate_payload; end
  def initialize(filters = nil); end
  include Twilio::JWT::Scope
end
class Twilio::JWT::TaskRouterCapability < Twilio::JWT::BaseJWT
  def _generate_payload; end
  def add_policy(policy); end
  def initialize(account_sid, auth_token, workspace_sid, channel_id, nbf: nil, ttl: nil, valid_until: nil); end
end
class Twilio::JWT::TaskRouterCapability::Policy
  def _generate_payload; end
  def allowed; end
  def allowed=(arg0); end
  def initialize(url, method, allowed, post_filters = nil, query_filters = nil); end
  def method; end
  def method=(arg0); end
  def post_filters; end
  def post_filters=(arg0); end
  def query_filters; end
  def query_filters=(arg0); end
  def url; end
  def url=(arg0); end
end
class Twilio::JWT::TaskRouterCapability::TaskRouterUtils
  def self.activities(workspace_sid); end
  def self.activity(workspace_sid, activity_sid); end
  def self.all_activities(workspace_sid); end
  def self.all_reservations(workspace_sid, worker_sid); end
  def self.all_task_queues(workspace_sid); end
  def self.all_tasks(workspace_sid); end
  def self.all_workers(workspace_sid); end
  def self.all_workspaces; end
  def self.reservation(workspace_sid, worker_sid, reservation_sid); end
  def self.reservations(workspace_sid, worker_sid); end
  def self.task(workspace_sid, tasks_sid); end
  def self.task_queue(workspace_sid, taskqueue_sid); end
  def self.task_queues(workspace_sid); end
  def self.tasks(workspace_sid); end
  def self.web_socket_policies(account_sid, channel_sid); end
  def self.worker(workspace_sid, worker_sid); end
  def self.worker_policies(workspace_sid, worker_sid); end
  def self.workers(workspace_sid); end
  def self.workspace(worskspace_sid); end
  def self.workspaces; end
end
module Twilio::Security
end
class Twilio::Security::RequestValidator
  def body_or_hash(params_or_body); end
  def build_hash_for(body); end
  def build_signature_for(url, params); end
  def initialize(auth_token = nil); end
  def secure_compare(a, b); end
  def validate(url, params, signature); end
end
class Twilio::Util::Configuration
  def account_sid; end
  def account_sid=(value); end
  def auth_token; end
  def auth_token=(value); end
end
module Twilio::TwiML
end
class Twilio::TwiML::TwiMLError < StandardError
end
class Twilio::TwiML::LeafNode
  def initialize(content); end
end
class Twilio::TwiML::Comment < Twilio::TwiML::LeafNode
  def xml(document); end
end
class Twilio::TwiML::Text < Twilio::TwiML::LeafNode
  def xml(document); end
end
class Twilio::TwiML::TwiML
  def add_child(name, value = nil, **keyword_args); end
  def add_text(content); end
  def append(verb); end
  def comment(body); end
  def initialize(**keyword_args); end
  def name; end
  def name=(arg0); end
  def self.to_lower_camel_case(symbol); end
  def to_s(xml_declaration = nil); end
  def to_xml(xml_declaration = nil); end
  def xml(document); end
end
class Twilio::TwiML::GenericNode < Twilio::TwiML::TwiML
  def initialize(name, value, **keyword_args); end
end
class Twilio::TwiML::VoiceResponse < Twilio::TwiML::TwiML
  def connect(action: nil, method: nil, **keyword_args); end
  def dial(number: nil, action: nil, method: nil, timeout: nil, hangup_on_star: nil, time_limit: nil, caller_id: nil, record: nil, trim: nil, recording_status_callback: nil, recording_status_callback_method: nil, recording_status_callback_event: nil, answer_on_bridge: nil, ring_tone: nil, **keyword_args); end
  def echo(**keyword_args); end
  def enqueue(name: nil, action: nil, method: nil, wait_url: nil, wait_url_method: nil, workflow_sid: nil, **keyword_args); end
  def gather(input: nil, action: nil, method: nil, timeout: nil, speech_timeout: nil, max_speech_time: nil, profanity_filter: nil, finish_on_key: nil, num_digits: nil, partial_result_callback: nil, partial_result_callback_method: nil, language: nil, hints: nil, barge_in: nil, debug: nil, action_on_empty_result: nil, **keyword_args); end
  def hangup(**keyword_args); end
  def initialize(**keyword_args); end
  def leave(**keyword_args); end
  def pause(length: nil, **keyword_args); end
  def pay(input: nil, action: nil, bank_account_type: nil, status_callback: nil, status_callback_method: nil, timeout: nil, max_attempts: nil, security_code: nil, postal_code: nil, min_postal_code_length: nil, payment_connector: nil, payment_method: nil, token_type: nil, charge_amount: nil, currency: nil, description: nil, valid_card_types: nil, language: nil, **keyword_args); end
  def play(url: nil, loop: nil, digits: nil, **keyword_args); end
  def prompt(for_: nil, error_type: nil, card_type: nil, attempt: nil, **keyword_args); end
  def queue(name, url: nil, method: nil, reservation_sid: nil, post_work_activity_sid: nil, **keyword_args); end
  def record(action: nil, method: nil, timeout: nil, finish_on_key: nil, max_length: nil, play_beep: nil, trim: nil, recording_status_callback: nil, recording_status_callback_method: nil, recording_status_callback_event: nil, transcribe: nil, transcribe_callback: nil, **keyword_args); end
  def redirect(url, method: nil, **keyword_args); end
  def reject(reason: nil, **keyword_args); end
  def say(message: nil, voice: nil, loop: nil, language: nil, **keyword_args); end
  def sms(message, to: nil, from: nil, action: nil, method: nil, status_callback: nil, **keyword_args); end
  def start(action: nil, method: nil, **keyword_args); end
  def stop(**keyword_args); end
end
class Twilio::TwiML::Stop < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def siprec(name: nil, connector_name: nil, **keyword_args); end
  def stream(name: nil, connector_name: nil, url: nil, track: nil, **keyword_args); end
end
class Twilio::TwiML::Siprec < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def parameter(name: nil, value: nil, **keyword_args); end
end
class Twilio::TwiML::Parameter < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Stream < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def parameter(name: nil, value: nil, **keyword_args); end
end
class Twilio::TwiML::Start < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def siprec(name: nil, connector_name: nil, **keyword_args); end
  def stream(name: nil, connector_name: nil, url: nil, track: nil, **keyword_args); end
end
class Twilio::TwiML::Prompt < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def pause(length: nil, **keyword_args); end
  def play(url: nil, loop: nil, digits: nil, **keyword_args); end
  def say(message: nil, voice: nil, loop: nil, language: nil, **keyword_args); end
end
class Twilio::TwiML::Pause < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Play < Twilio::TwiML::TwiML
  def initialize(url: nil, **keyword_args); end
end
class Twilio::TwiML::Say < Twilio::TwiML::TwiML
  def break(strength: nil, time: nil, **keyword_args); end
  def emphasis(words, level: nil, **keyword_args); end
  def initialize(message: nil, **keyword_args); end
  def lang(words, xmlLang: nil, **keyword_args); end
  def p(words, **keyword_args); end
  def phoneme(words, alphabet: nil, ph: nil, **keyword_args); end
  def prosody(words, volume: nil, rate: nil, pitch: nil, **keyword_args); end
  def s(words, **keyword_args); end
  def say_as(words, interpretAs: nil, role: nil, **keyword_args); end
  def sub(words, aliasAttribute: nil, **keyword_args); end
  def w(words, role: nil, **keyword_args); end
end
class Twilio::TwiML::SsmlW < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlSub < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlSayAs < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlS < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlProsody < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlPhoneme < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlP < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlLang < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlEmphasis < Twilio::TwiML::TwiML
  def initialize(words, **keyword_args); end
end
class Twilio::TwiML::SsmlBreak < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Pay < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def parameter(name: nil, value: nil, **keyword_args); end
  def prompt(for_: nil, error_type: nil, card_type: nil, attempt: nil, **keyword_args); end
end
class Twilio::TwiML::Sms < Twilio::TwiML::TwiML
  def initialize(message, **keyword_args); end
end
class Twilio::TwiML::Reject < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Redirect < Twilio::TwiML::TwiML
  def initialize(url, **keyword_args); end
end
class Twilio::TwiML::Record < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Queue < Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end
class Twilio::TwiML::Leave < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Hangup < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Gather < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def pause(length: nil, **keyword_args); end
  def play(url: nil, loop: nil, digits: nil, **keyword_args); end
  def say(message: nil, voice: nil, loop: nil, language: nil, **keyword_args); end
end
class Twilio::TwiML::Enqueue < Twilio::TwiML::TwiML
  def initialize(name: nil, **keyword_args); end
  def task(body, priority: nil, timeout: nil, **keyword_args); end
end
class Twilio::TwiML::Task < Twilio::TwiML::TwiML
  def initialize(body, **keyword_args); end
end
class Twilio::TwiML::Echo < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
end
class Twilio::TwiML::Dial < Twilio::TwiML::TwiML
  def client(identity: nil, url: nil, method: nil, status_callback_event: nil, status_callback: nil, status_callback_method: nil, **keyword_args); end
  def conference(name, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, max_participants: nil, record: nil, region: nil, whisper: nil, trim: nil, status_callback_event: nil, status_callback: nil, status_callback_method: nil, recording_status_callback: nil, recording_status_callback_method: nil, recording_status_callback_event: nil, event_callback_url: nil, **keyword_args); end
  def initialize(number: nil, **keyword_args); end
  def number(phone_number, send_digits: nil, url: nil, method: nil, status_callback_event: nil, status_callback: nil, status_callback_method: nil, **keyword_args); end
  def queue(name, url: nil, method: nil, reservation_sid: nil, post_work_activity_sid: nil, **keyword_args); end
  def sim(sim_sid, **keyword_args); end
  def sip(sip_url, username: nil, password: nil, url: nil, method: nil, status_callback_event: nil, status_callback: nil, status_callback_method: nil, **keyword_args); end
end
class Twilio::TwiML::Sip < Twilio::TwiML::TwiML
  def initialize(sip_url, **keyword_args); end
end
class Twilio::TwiML::Sim < Twilio::TwiML::TwiML
  def initialize(sim_sid, **keyword_args); end
end
class Twilio::TwiML::Number < Twilio::TwiML::TwiML
  def initialize(phone_number, **keyword_args); end
end
class Twilio::TwiML::Conference < Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end
class Twilio::TwiML::Client < Twilio::TwiML::TwiML
  def identity(client_identity, **keyword_args); end
  def initialize(identity: nil, **keyword_args); end
  def parameter(name: nil, value: nil, **keyword_args); end
end
class Twilio::TwiML::Identity < Twilio::TwiML::TwiML
  def initialize(client_identity, **keyword_args); end
end
class Twilio::TwiML::Connect < Twilio::TwiML::TwiML
  def autopilot(name, **keyword_args); end
  def initialize(**keyword_args); end
  def room(name, participant_identity: nil, **keyword_args); end
  def stream(name: nil, connector_name: nil, url: nil, track: nil, **keyword_args); end
end
class Twilio::TwiML::Autopilot < Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end
class Twilio::TwiML::Room < Twilio::TwiML::TwiML
  def initialize(name, **keyword_args); end
end
class Twilio::TwiML::MessagingResponse < Twilio::TwiML::TwiML
  def initialize(**keyword_args); end
  def message(body: nil, to: nil, from: nil, action: nil, method: nil, status_callback: nil, **keyword_args); end
  def redirect(url, method: nil, **keyword_args); end
end
class Twilio::TwiML::Message < Twilio::TwiML::TwiML
  def body(message, **keyword_args); end
  def initialize(body: nil, **keyword_args); end
  def media(url, **keyword_args); end
end
class Twilio::TwiML::Media < Twilio::TwiML::TwiML
  def initialize(url, **keyword_args); end
end
class Twilio::TwiML::Body < Twilio::TwiML::TwiML
  def initialize(message, **keyword_args); end
end
module Twilio::HTTP
end
class Twilio::HTTP::Client
  def _request(request); end
  def adapter; end
  def adapter=(arg0); end
  def initialize(proxy_prot = nil, proxy_addr = nil, proxy_port = nil, proxy_user = nil, proxy_pass = nil, ssl_ca_file = nil, timeout: nil); end
  def last_request; end
  def last_response; end
  def request(host, port, method, url, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def timeout; end
end
module Twilio::REST
  def url_join(left, right); end
end
class Twilio::REST::ListResource
  def initialize(version); end
end
class Twilio::REST::InstanceContext
  def initialize(version); end
end
class Twilio::REST::InstanceResource
  def initialize(version); end
end
class Twilio::Response
  def body; end
  def body=(arg0); end
  def headers; end
  def headers=(arg0); end
  def initialize(status_code, body, headers: nil); end
  def status_code; end
  def status_code=(arg0); end
  def to_s; end
end
class Twilio::REST::TwilioError < StandardError
  def body; end
end
class Twilio::REST::RestError < Twilio::REST::TwilioError
  def body; end
  def code; end
  def detail; end
  def error_message; end
  def format_message(initial_message); end
  def initialize(message, response); end
  def message; end
  def more_info; end
  def response; end
  def status_code; end
  def to_s; end
end
class Twilio::REST::ObsoleteError < StandardError
end
class Twilio::Request
  def auth; end
  def data; end
  def headers; end
  def host; end
  def initialize(host, port, method, url, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def method; end
  def params; end
  def port; end
  def timeout; end
  def to_s; end
  def url; end
end
class Twilio::Values
  def self.of(hash); end
end
class Twilio::REST::ObsoleteClient
  def initialize(*arg0); end
end
class Twilio::TwilioResponse
  def body; end
  def body=(arg0); end
  def initialize(status_code, body); end
  def status_code; end
  def status_code=(arg0); end
  def to_s; end
end
class Twilio::REST::Version
  def absolute_url(uri); end
  def create(method, uri, params: nil, data: nil, headers: nil, auth: nil, timeout: nil); end
  def delete(method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def domain; end
  def domain=(arg0); end
  def exception(response, header); end
  def fetch(method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def initialize(domain); end
  def page(method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def read_limits(limit = nil, page_size = nil); end
  def relative_uri(uri); end
  def request(method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def stream(page, limit: nil, page_limit: nil); end
  def update(method, uri, params: nil, data: nil, headers: nil, auth: nil, timeout: nil); end
end
class Twilio::REST::Version::RecordStream
  def each; end
  def initialize(page, limit: nil, page_limit: nil); end
  include Enumerable
end
class Twilio::REST::Domain
  def absolute_url(uri); end
  def client; end
  def initialize(client); end
  def request(method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
end
class Twilio::REST::Page
  def each; end
  def get_instance(payload); end
  def initialize(version, response); end
  def load_page(payload); end
  def next_page; end
  def next_page_url; end
  def previous_page; end
  def previous_page_url; end
  def process_response(response); end
  def to_s; end
  include Enumerable
end
class Twilio::REST::IpMessaging < Twilio::REST::Domain
  def credentials(sid = nil); end
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
  def v2; end
end
class Twilio::REST::Taskrouter < Twilio::REST::Domain
  def initialize(twilio); end
  def to_s; end
  def v1; end
  def workspaces(sid = nil); end
end
class Twilio::REST::Api < Twilio::REST::Domain
  def account; end
  def accounts(sid = nil); end
  def addresses(sid = nil); end
  def applications(sid = nil); end
  def authorized_connect_apps(connect_app_sid = nil); end
  def available_phone_numbers(country_code = nil); end
  def balance; end
  def calls(sid = nil); end
  def conferences(sid = nil); end
  def connect_apps(sid = nil); end
  def incoming_phone_numbers(sid = nil); end
  def initialize(twilio); end
  def keys(sid = nil); end
  def messages(sid = nil); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = nil); end
  def outgoing_caller_ids(sid = nil); end
  def queues(sid = nil); end
  def recordings(sid = nil); end
  def short_codes(sid = nil); end
  def signing_keys(sid = nil); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = nil); end
  def usage; end
  def v2010; end
  def validation_requests; end
end
class Twilio::REST::Insights < Twilio::REST::Domain
  def initialize(twilio); end
  def summary(call_sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Chat < Twilio::REST::Domain
  def credentials(sid = nil); end
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
  def v2; end
end
class Twilio::REST::Trunking < Twilio::REST::Domain
  def initialize(twilio); end
  def to_s; end
  def trunks(sid = nil); end
  def v1; end
end
class Twilio::REST::Sync < Twilio::REST::Domain
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Serverless < Twilio::REST::Domain
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Messaging < Twilio::REST::Domain
  def initialize(twilio); end
  def services(sid = nil); end
  def sessions(sid = nil); end
  def to_s; end
  def v1; end
  def webhooks; end
end
class Twilio::REST::Fax < Twilio::REST::Domain
  def faxes(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Accounts < Twilio::REST::Domain
  def credentials; end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Wireless < Twilio::REST::Domain
  def commands(sid = nil); end
  def initialize(twilio); end
  def rate_plans(sid = nil); end
  def sims(sid = nil); end
  def to_s; end
  def usage_records; end
  def v1; end
end
class Twilio::REST::FlexApi < Twilio::REST::Domain
  def channel(sid = nil); end
  def configuration; end
  def flex_flow(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
  def web_channel(sid = nil); end
end
class Twilio::REST::Voice < Twilio::REST::Domain
  def dialing_permissions; end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Autopilot < Twilio::REST::Domain
  def assistants(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Authy < Twilio::REST::Domain
  def forms(form_type = nil); end
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Pricing < Twilio::REST::Domain
  def initialize(twilio); end
  def messaging; end
  def phone_numbers; end
  def to_s; end
  def v1; end
  def v2; end
  def voice; end
end
class Twilio::REST::Lookups < Twilio::REST::Domain
  def initialize(twilio); end
  def phone_numbers(phone_number = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Studio < Twilio::REST::Domain
  def flows(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Verify < Twilio::REST::Domain
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v2; end
end
class Twilio::REST::Video < Twilio::REST::Domain
  def composition_hooks(sid = nil); end
  def composition_settings; end
  def compositions(sid = nil); end
  def initialize(twilio); end
  def recording_settings; end
  def recordings(sid = nil); end
  def rooms(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Proxy < Twilio::REST::Domain
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Preview < Twilio::REST::Domain
  def acc_security; end
  def assistants(sid = nil); end
  def authorization_documents(sid = nil); end
  def available_add_ons(sid = nil); end
  def branded_calls; end
  def bulk_exports; end
  def commands(sid = nil); end
  def cps; end
  def current_calls; end
  def deployed_devices; end
  def devices; end
  def export_configuration(resource_type = nil); end
  def exports(resource_type = nil); end
  def fleets(sid = nil); end
  def hosted_number_orders(sid = nil); end
  def hosted_numbers; end
  def initialize(twilio); end
  def installed_add_ons(sid = nil); end
  def marketplace; end
  def phone_calls; end
  def rate_plans(sid = nil); end
  def services(sid = nil); end
  def sims(sid = nil); end
  def sync; end
  def to_s; end
  def trusted_comms; end
  def understand; end
  def wireless; end
end
class Twilio::REST::Client
  def account_sid; end
  def account_sid=(arg0); end
  def accounts; end
  def addresses(sid = nil); end
  def api; end
  def applications(sid = nil); end
  def auth_token; end
  def auth_token=(arg0); end
  def authorized_connect_apps(connect_app_sid = nil); end
  def authy; end
  def autopilot; end
  def available_phone_numbers(country_code = nil); end
  def balance; end
  def calls(sid = nil); end
  def chat; end
  def conferences(sid = nil); end
  def connect_apps(sid = nil); end
  def conversations; end
  def fax; end
  def flex_api; end
  def http_client; end
  def http_client=(arg0); end
  def incoming_phone_numbers(sid = nil); end
  def initialize(username = nil, password = nil, account_sid = nil, region = nil, http_client = nil); end
  def insights; end
  def ip_messaging; end
  def keys(sid = nil); end
  def lookups; end
  def messages(sid = nil); end
  def messaging; end
  def monitor; end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = nil); end
  def notify; end
  def outgoing_caller_ids(sid = nil); end
  def password; end
  def password=(arg0); end
  def preview; end
  def pricing; end
  def proxy; end
  def queues(sid = nil); end
  def recordings(sid = nil); end
  def region; end
  def region=(arg0); end
  def request(host, port, method, uri, params = nil, data = nil, headers = nil, auth = nil, timeout = nil); end
  def serverless; end
  def short_codes(sid = nil); end
  def signing_keys(sid = nil); end
  def sip; end
  def studio; end
  def sync; end
  def taskrouter; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = nil); end
  def trunking; end
  def usage; end
  def username; end
  def username=(arg0); end
  def validate_ssl_certificate; end
  def validation_requests; end
  def verify; end
  def video; end
  def voice; end
  def wireless; end
end
class Twilio::REST::BaseClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::IpMessagingClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::LookupsClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::MonitorClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::PricingClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::TaskRouterClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::TrunkingClient < Twilio::REST::ObsoleteClient
end
class Twilio::REST::Notify < Twilio::REST::Domain
  def credentials(sid = nil); end
  def initialize(twilio); end
  def services(sid = nil); end
  def to_s; end
  def v1; end
end
class Twilio::REST::Conversations < Twilio::REST::Domain
  def conversations(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
  def webhooks; end
end
class Twilio::REST::Monitor < Twilio::REST::Domain
  def alerts(sid = nil); end
  def events(sid = nil); end
  def initialize(twilio); end
  def to_s; end
  def v1; end
end
class Twilio::REST::IpMessaging::V1 < Twilio::REST::Version
  def credentials(sid = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::CredentialList < Twilio::REST::ListResource
  def create(type: nil, friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
end
class Twilio::REST::IpMessaging::V1::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext < Twilio::REST::InstanceContext
  def channels(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def roles(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, webhooks_on_message_send_url: nil, webhooks_on_message_send_method: nil, webhooks_on_message_update_url: nil, webhooks_on_message_update_method: nil, webhooks_on_message_remove_url: nil, webhooks_on_message_remove_method: nil, webhooks_on_channel_add_url: nil, webhooks_on_channel_add_method: nil, webhooks_on_channel_destroy_url: nil, webhooks_on_channel_destroy_method: nil, webhooks_on_channel_update_url: nil, webhooks_on_channel_update_method: nil, webhooks_on_member_add_url: nil, webhooks_on_member_add_method: nil, webhooks_on_member_remove_url: nil, webhooks_on_member_remove_method: nil, webhooks_on_message_sent_url: nil, webhooks_on_message_sent_method: nil, webhooks_on_message_updated_url: nil, webhooks_on_message_updated_method: nil, webhooks_on_message_removed_url: nil, webhooks_on_message_removed_method: nil, webhooks_on_channel_added_url: nil, webhooks_on_channel_added_method: nil, webhooks_on_channel_destroyed_url: nil, webhooks_on_channel_destroyed_method: nil, webhooks_on_channel_updated_url: nil, webhooks_on_channel_updated_method: nil, webhooks_on_member_added_url: nil, webhooks_on_member_added_method: nil, webhooks_on_member_removed_url: nil, webhooks_on_member_removed_method: nil, limits_channel_members: nil, limits_user_channels: nil); end
  def users(sid = nil); end
end
class Twilio::REST::IpMessaging::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def limits; end
  def links; end
  def notifications; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, webhooks_on_message_send_url: nil, webhooks_on_message_send_method: nil, webhooks_on_message_update_url: nil, webhooks_on_message_update_method: nil, webhooks_on_message_remove_url: nil, webhooks_on_message_remove_method: nil, webhooks_on_channel_add_url: nil, webhooks_on_channel_add_method: nil, webhooks_on_channel_destroy_url: nil, webhooks_on_channel_destroy_method: nil, webhooks_on_channel_update_url: nil, webhooks_on_channel_update_method: nil, webhooks_on_member_add_url: nil, webhooks_on_member_add_method: nil, webhooks_on_member_remove_url: nil, webhooks_on_member_remove_method: nil, webhooks_on_message_sent_url: nil, webhooks_on_message_sent_method: nil, webhooks_on_message_updated_url: nil, webhooks_on_message_updated_method: nil, webhooks_on_message_removed_url: nil, webhooks_on_message_removed_method: nil, webhooks_on_channel_added_url: nil, webhooks_on_channel_added_method: nil, webhooks_on_channel_destroyed_url: nil, webhooks_on_channel_destroyed_method: nil, webhooks_on_channel_updated_url: nil, webhooks_on_channel_updated_method: nil, webhooks_on_member_added_url: nil, webhooks_on_member_added_method: nil, webhooks_on_member_removed_url: nil, webhooks_on_member_removed_method: nil, limits_channel_members: nil, limits_user_channels: nil); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
  def webhooks; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, attributes: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def user_channels; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def url; end
  def user_channels; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def invites(sid = nil); end
  def members(sid = nil); end
  def messages(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil); end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageList < Twilio::REST::ListResource
  def create(body: nil, from: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(order: nil, limit: nil, page_size: nil); end
  def page(order: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(body: nil, attributes: nil); end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def update(body: nil, attributes: nil); end
  def url; end
  def was_edited; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil); end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::MemberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InvitePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelContext::InviteInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::UserContext::UserChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def initialize(version, payload, service_sid: nil, user_sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelList < Twilio::REST::ListResource
  def create(friendly_name: nil, unique_name: nil, attributes: nil, type: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(type: nil, limit: nil, page_size: nil); end
  def page(type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::ChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::RoleList < Twilio::REST::ListResource
  def create(friendly_name: nil, type: nil, permission: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::RolePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::RoleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(permission: nil); end
end
class Twilio::REST::IpMessaging::V1::ServiceContext::RoleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V2 < Twilio::REST::Version
  def credentials(sid = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::CredentialList < Twilio::REST::ListResource
  def create(type: nil, friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
end
class Twilio::REST::IpMessaging::V2::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V2::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext < Twilio::REST::InstanceContext
  def bindings(sid = nil); end
  def channels(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def roles(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_new_message_sound: nil, notifications_new_message_badge_count_enabled: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_added_to_channel_sound: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_removed_from_channel_sound: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, notifications_invited_to_channel_sound: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, limits_channel_members: nil, limits_user_channels: nil, media_compatibility_message: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, notifications_log_enabled: nil); end
  def users(sid = nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def bindings; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def limits; end
  def links; end
  def media; end
  def notifications; end
  def post_webhook_retry_count; end
  def post_webhook_url; end
  def pre_webhook_retry_count; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_new_message_sound: nil, notifications_new_message_badge_count_enabled: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_added_to_channel_sound: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_removed_from_channel_sound: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, notifications_invited_to_channel_sound: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, limits_channel_members: nil, limits_user_channels: nil, media_compatibility_message: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, notifications_log_enabled: nil); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, attributes: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def user_bindings(sid = nil); end
  def user_channels(channel_sid = nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def url; end
  def user_bindings; end
  def user_channels; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def invites(sid = nil); end
  def members(sid = nil); end
  def messages(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def webhooks(sid = nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageList < Twilio::REST::ListResource
  def create(from: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, body: nil, media_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(order: nil, limit: nil, page_size: nil); end
  def page(order: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(body: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, from: nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_updated_by; end
  def media; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def type; end
  def update(body: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, from: nil); end
  def url; end
  def was_edited; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookList < Twilio::REST::ListResource
  def create(type: nil, configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::MemberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InvitePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelContext::InviteInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, user_sid, channel_sid); end
  def inspect; end
  def to_s; end
  def update(notification_level: nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, user_sid: nil, channel_sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def notification_level; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
  def update(notification_level: nil); end
  def url; end
  def user_sid; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(binding_type: nil, limit: nil, page_size: nil); end
  def page(binding_type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(binding_type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, user_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::UserContext::UserBindingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, user_sid: nil, sid: nil); end
  def inspect; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def user_sid; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelList < Twilio::REST::ListResource
  def create(friendly_name: nil, unique_name: nil, attributes: nil, type: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(type: nil, limit: nil, page_size: nil); end
  def page(type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::ChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def url; end
  def webhooks; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::BindingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(binding_type: nil, identity: nil, limit: nil, page_size: nil); end
  def page(binding_type: nil, identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(binding_type: nil, identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::BindingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::BindingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::BindingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::RoleList < Twilio::REST::ListResource
  def create(friendly_name: nil, type: nil, permission: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::RolePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::RoleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(permission: nil); end
end
class Twilio::REST::IpMessaging::V2::ServiceContext::RoleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: nil); end
  def url; end
end
class Twilio::REST::Verify::V2 < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil, code_length: nil, lookup_enabled: nil, skip_sms_to_landlines: nil, dtmf_input_required: nil, tts_name: nil, psd2_enabled: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def messaging_configurations(country = nil); end
  def rate_limits(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, code_length: nil, lookup_enabled: nil, skip_sms_to_landlines: nil, dtmf_input_required: nil, tts_name: nil, psd2_enabled: nil); end
  def verification_checks; end
  def verifications(sid = nil); end
end
class Twilio::REST::Verify::V2::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def code_length; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dtmf_input_required; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def lookup_enabled; end
  def messaging_configurations; end
  def psd2_enabled; end
  def rate_limits; end
  def sid; end
  def skip_sms_to_landlines; end
  def to_s; end
  def tts_name; end
  def update(friendly_name: nil, code_length: nil, lookup_enabled: nil, skip_sms_to_landlines: nil, dtmf_input_required: nil, tts_name: nil, psd2_enabled: nil); end
  def url; end
  def verification_checks; end
  def verifications; end
end
class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationList < Twilio::REST::ListResource
  def create(country: nil, messaging_service_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, country); end
  def inspect; end
  def to_s; end
  def update(messaging_service_sid: nil); end
end
class Twilio::REST::Verify::V2::ServiceContext::MessagingConfigurationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def country; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, country: nil); end
  def inspect; end
  def messaging_service_sid; end
  def service_sid; end
  def to_s; end
  def update(messaging_service_sid: nil); end
  def url; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitList < Twilio::REST::ListResource
  def create(unique_name: nil, description: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext < Twilio::REST::InstanceContext
  def buckets(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(description: nil); end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def buckets; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(description: nil); end
  def url; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationList < Twilio::REST::ListResource
  def create(to: nil, channel: nil, custom_message: nil, send_digits: nil, locale: nil, custom_code: nil, amount: nil, payee: nil, rate_limits: nil); end
  def initialize(version, service_sid: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(status: nil); end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def amount; end
  def channel; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def lookup; end
  def payee; end
  def service_sid; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def update(status: nil); end
  def url; end
  def valid; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketList < Twilio::REST::ListResource
  def create(max: nil, interval: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, rate_limit_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, rate_limit_sid, sid); end
  def inspect; end
  def to_s; end
  def update(max: nil, interval: nil); end
end
class Twilio::REST::Verify::V2::ServiceContext::RateLimitContext::BucketInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, rate_limit_sid: nil, sid: nil); end
  def inspect; end
  def interval; end
  def max; end
  def rate_limit_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(max: nil, interval: nil); end
  def url; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckList < Twilio::REST::ListResource
  def create(code: nil, to: nil, verification_sid: nil, amount: nil, payee: nil); end
  def initialize(version, service_sid: nil); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Verify::V2::ServiceContext::VerificationCheckInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def amount; end
  def channel; end
  def date_created; end
  def date_updated; end
  def initialize(version, payload, service_sid: nil); end
  def inspect; end
  def payee; end
  def service_sid; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def valid; end
end
class Twilio::REST::Trunking::V1 < Twilio::REST::Version
  def initialize(domain); end
  def to_s; end
  def trunks(sid = nil); end
end
class Twilio::REST::Trunking::V1::TrunkList < Twilio::REST::ListResource
  def create(friendly_name: nil, domain_name: nil, disaster_recovery_url: nil, disaster_recovery_method: nil, recording: nil, secure: nil, cnam_lookup_enabled: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext < Twilio::REST::InstanceContext
  def credentials_lists(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def ip_access_control_lists(sid = nil); end
  def origination_urls(sid = nil); end
  def phone_numbers(sid = nil); end
  def terminating_sip_domains(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, domain_name: nil, disaster_recovery_url: nil, disaster_recovery_method: nil, recording: nil, secure: nil, cnam_lookup_enabled: nil); end
end
class Twilio::REST::Trunking::V1::TrunkInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def auth_type; end
  def auth_type_set; end
  def cnam_lookup_enabled; end
  def context; end
  def credentials_lists; end
  def date_created; end
  def date_updated; end
  def delete; end
  def disaster_recovery_method; end
  def disaster_recovery_url; end
  def domain_name; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def ip_access_control_lists; end
  def links; end
  def origination_urls; end
  def phone_numbers; end
  def recording; end
  def secure; end
  def sid; end
  def terminating_sip_domains; end
  def to_s; end
  def update(friendly_name: nil, domain_name: nil, disaster_recovery_url: nil, disaster_recovery_method: nil, recording: nil, secure: nil, cnam_lookup_enabled: nil); end
  def url; end
end
class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberList < Twilio::REST::ListResource
  def create(phone_number_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, trunk_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, trunk_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::PhoneNumberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def api_version; end
  def beta; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, trunk_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def url; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlList < Twilio::REST::ListResource
  def create(weight: nil, priority: nil, enabled: nil, friendly_name: nil, sip_url: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, trunk_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, trunk_sid, sid); end
  def inspect; end
  def to_s; end
  def update(weight: nil, priority: nil, enabled: nil, friendly_name: nil, sip_url: nil); end
end
class Twilio::REST::Trunking::V1::TrunkContext::OriginationUrlInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, trunk_sid: nil, sid: nil); end
  def inspect; end
  def priority; end
  def sid; end
  def sip_url; end
  def to_s; end
  def trunk_sid; end
  def update(weight: nil, priority: nil, enabled: nil, friendly_name: nil, sip_url: nil); end
  def url; end
  def weight; end
end
class Twilio::REST::Trunking::V1::TrunkContext::TerminatingSipDomainList < Twilio::REST::ListResource
  def create(sip_domain_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, trunk_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::TerminatingSipDomainPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::TerminatingSipDomainContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, trunk_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::TerminatingSipDomainInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def auth_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_name; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, trunk_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def sip_registration; end
  def to_s; end
  def trunk_sid; end
  def url; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_status_callback_method; end
  def voice_status_callback_url; end
  def voice_url; end
end
class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListList < Twilio::REST::ListResource
  def create(ip_access_control_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, trunk_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, trunk_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::IpAccessControlListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, trunk_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def trunk_sid; end
  def url; end
end
class Twilio::REST::Trunking::V1::TrunkContext::CredentialListList < Twilio::REST::ListResource
  def create(credential_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, trunk_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::CredentialListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::CredentialListContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, trunk_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Trunking::V1::TrunkContext::CredentialListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, trunk_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def trunk_sid; end
  def url; end
end
class Twilio::REST::Authy::V1 < Twilio::REST::Version
  def forms(form_type = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext < Twilio::REST::InstanceContext
  def delete; end
  def entities(identity = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Authy::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def entities; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
end
class Twilio::REST::Authy::V1::FormList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Authy::V1::FormPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Authy::V1::FormContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, form_type); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Authy::V1::FormInstance < Twilio::REST::InstanceResource
  def context; end
  def fetch; end
  def form_meta; end
  def form_type; end
  def forms; end
  def initialize(version, payload, form_type: nil); end
  def inspect; end
  def to_s; end
  def url; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext < Twilio::REST::InstanceContext
  def delete; end
  def factors(sid = nil); end
  def fetch; end
  def initialize(version, service_sid, identity); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorContext < Twilio::REST::InstanceContext
  def challenges(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, service_sid, identity, sid); end
  def inspect; end
  def to_s; end
  def update(auth_payload: nil); end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorContext::ChallengeList < Twilio::REST::ListResource
  def create(expiration_date: nil, details: nil, hidden_details: nil); end
  def initialize(version, service_sid: nil, identity: nil, factor_sid: nil); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorContext::ChallengePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorContext::ChallengeContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, identity, factor_sid, sid); end
  def inspect; end
  def to_s; end
  def update(auth_payload: nil); end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorContext::ChallengeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_responded; end
  def date_updated; end
  def delete; end
  def details; end
  def entity_sid; end
  def expiration_date; end
  def factor_sid; end
  def factor_strength; end
  def factor_type; end
  def fetch; end
  def hidden_details; end
  def identity; end
  def initialize(version, payload, service_sid: nil, identity: nil, factor_sid: nil, sid: nil); end
  def inspect; end
  def responded_reason; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def update(auth_payload: nil); end
  def url; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorList < Twilio::REST::ListResource
  def create(binding: nil, friendly_name: nil, factor_type: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, identity: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityContext::FactorInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def challenges; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def entity_sid; end
  def factor_strength; end
  def factor_type; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, service_sid: nil, identity: nil, sid: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def update(auth_payload: nil); end
  def url; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityList < Twilio::REST::ListResource
  def create(identity: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Authy::V1::ServiceContext::EntityInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def factors; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, identity: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Messaging::V1 < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def sessions(sid = nil); end
  def to_s; end
  def webhooks; end
end
class Twilio::REST::Messaging::V1::SessionList < Twilio::REST::ListResource
  def create(messaging_service_sid: nil, friendly_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def messages(sid = nil); end
  def participants(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def webhooks(sid = nil); end
end
class Twilio::REST::Messaging::V1::SessionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def messages; end
  def messaging_service_sid; end
  def participants; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def url; end
  def webhooks; end
end
class Twilio::REST::Messaging::V1::WebhookList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::WebhookContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
  def update(webhook_method: nil, webhook_filters: nil, pre_webhook_url: nil, post_webhook_url: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, target: nil); end
end
class Twilio::REST::Messaging::V1::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def fetch; end
  def initialize(version, payload); end
  def inspect; end
  def post_webhook_retry_count; end
  def post_webhook_url; end
  def pre_webhook_retry_count; end
  def pre_webhook_url; end
  def service_sid; end
  def target; end
  def to_s; end
  def update(webhook_method: nil, webhook_filters: nil, pre_webhook_url: nil, post_webhook_url: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, target: nil); end
  def url; end
  def webhook_filters; end
  def webhook_method; end
end
class Twilio::REST::Messaging::V1::SessionContext::MessageList < Twilio::REST::ListResource
  def create(author: nil, attributes: nil, date_created: nil, date_updated: nil, body: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, session_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, session_sid, sid); end
  def inspect; end
  def to_s; end
  def update(author: nil, attributes: nil, date_created: nil, date_updated: nil, body: nil); end
end
class Twilio::REST::Messaging::V1::SessionContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def author; end
  def body; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def index; end
  def initialize(version, payload, session_sid: nil, sid: nil); end
  def inspect; end
  def messaging_service_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def update(author: nil, attributes: nil, date_created: nil, date_updated: nil, body: nil); end
  def url; end
end
class Twilio::REST::Messaging::V1::SessionContext::WebhookList < Twilio::REST::ListResource
  def create(target: nil, configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil, configuration_replay_after: nil, configuration_buffer_messages: nil, configuration_buffer_window: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, session_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::WebhookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, session_sid, sid); end
  def inspect; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil, configuration_buffer_messages: nil, configuration_buffer_window: nil); end
end
class Twilio::REST::Messaging::V1::SessionContext::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, session_sid: nil, sid: nil); end
  def inspect; end
  def session_sid; end
  def sid; end
  def target; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil, configuration_buffer_messages: nil, configuration_buffer_window: nil); end
  def url; end
end
class Twilio::REST::Messaging::V1::SessionContext::ParticipantList < Twilio::REST::ListResource
  def create(attributes: nil, twilio_address: nil, date_created: nil, date_updated: nil, identity: nil, user_address: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, session_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::ParticipantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::SessionContext::ParticipantContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, session_sid, sid); end
  def inspect; end
  def to_s; end
  def update(attributes: nil, date_created: nil, date_updated: nil); end
end
class Twilio::REST::Messaging::V1::SessionContext::ParticipantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, session_sid: nil, sid: nil); end
  def inspect; end
  def messaging_service_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def twilio_address; end
  def type; end
  def update(attributes: nil, date_created: nil, date_updated: nil); end
  def url; end
  def user_address; end
end
class Twilio::REST::Messaging::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil, inbound_request_url: nil, inbound_method: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, sticky_sender: nil, mms_converter: nil, smart_encoding: nil, scan_message_content: nil, fallback_to_long_code: nil, area_code_geomatch: nil, validity_period: nil, synchronous_validation: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext < Twilio::REST::InstanceContext
  def alpha_senders(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def phone_numbers(sid = nil); end
  def short_codes(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, inbound_request_url: nil, inbound_method: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, sticky_sender: nil, mms_converter: nil, smart_encoding: nil, scan_message_content: nil, fallback_to_long_code: nil, area_code_geomatch: nil, validity_period: nil, synchronous_validation: nil); end
end
class Twilio::REST::Messaging::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def alpha_senders; end
  def area_code_geomatch; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fallback_method; end
  def fallback_to_long_code; end
  def fallback_url; end
  def fetch; end
  def friendly_name; end
  def inbound_method; end
  def inbound_request_url; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def mms_converter; end
  def phone_numbers; end
  def scan_message_content; end
  def short_codes; end
  def sid; end
  def smart_encoding; end
  def status_callback; end
  def sticky_sender; end
  def synchronous_validation; end
  def to_s; end
  def update(friendly_name: nil, inbound_request_url: nil, inbound_method: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, sticky_sender: nil, mms_converter: nil, smart_encoding: nil, scan_message_content: nil, fallback_to_long_code: nil, area_code_geomatch: nil, validity_period: nil, synchronous_validation: nil); end
  def url; end
  def validity_period; end
end
class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderList < Twilio::REST::ListResource
  def create(alpha_sender: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::AlphaSenderInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def alpha_sender; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberList < Twilio::REST::ListResource
  def create(phone_number_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::PhoneNumberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def capabilities; end
  def context; end
  def country_code; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def phone_number; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeList < Twilio::REST::ListResource
  def create(short_code_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::ShortCodePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Messaging::V1::ServiceContext::ShortCodeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def capabilities; end
  def context; end
  def country_code; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def short_code; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Conversations::V1 < Twilio::REST::Version
  def conversations(sid = nil); end
  def initialize(domain); end
  def to_s; end
  def webhooks; end
end
class Twilio::REST::Conversations::V1::ConversationContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def messages(sid = nil); end
  def participants(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def webhooks(sid = nil); end
end
class Twilio::REST::Conversations::V1::ConversationContext::MessageList < Twilio::REST::ListResource
  def create(author: nil, body: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, conversation_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, conversation_sid, sid); end
  def inspect; end
  def to_s; end
  def update(author: nil, body: nil, date_created: nil, date_updated: nil, attributes: nil); end
end
class Twilio::REST::Conversations::V1::ConversationContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def author; end
  def body; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def index; end
  def initialize(version, payload, conversation_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(author: nil, body: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::Conversations::V1::ConversationContext::WebhookList < Twilio::REST::ListResource
  def create(target: nil, configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_replay_after: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, conversation_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::WebhookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, conversation_sid, sid); end
  def inspect; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil); end
end
class Twilio::REST::Conversations::V1::ConversationContext::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def configuration; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, conversation_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def target; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil); end
  def url; end
end
class Twilio::REST::Conversations::V1::ConversationContext::ParticipantList < Twilio::REST::ListResource
  def create(identity: nil, messaging_binding_address: nil, messaging_binding_proxy_address: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, conversation_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::ParticipantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationContext::ParticipantContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, conversation_sid, sid); end
  def inspect; end
  def to_s; end
  def update(date_created: nil, date_updated: nil, attributes: nil); end
end
class Twilio::REST::Conversations::V1::ConversationContext::ParticipantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def conversation_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, conversation_sid: nil, sid: nil); end
  def inspect; end
  def messaging_binding; end
  def sid; end
  def to_s; end
  def update(date_created: nil, date_updated: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::Conversations::V1::WebhookList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::WebhookContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
  def update(method: nil, filters: nil, pre_webhook_url: nil, post_webhook_url: nil, target: nil); end
end
class Twilio::REST::Conversations::V1::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def fetch; end
  def filters; end
  def initialize(version, payload); end
  def inspect; end
  def method; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def target; end
  def to_s; end
  def update(method: nil, filters: nil, pre_webhook_url: nil, post_webhook_url: nil, target: nil); end
  def url; end
end
class Twilio::REST::Conversations::V1::ConversationList < Twilio::REST::ListResource
  def create(friendly_name: nil, date_created: nil, date_updated: nil, messaging_service_sid: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Conversations::V1::ConversationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def chat_service_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def messages; end
  def messaging_service_sid; end
  def participants; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def url; end
  def webhooks; end
end
class Twilio::REST::Api::V2010 < Twilio::REST::Version
  def account; end
  def account=(value); end
  def accounts(sid = nil); end
  def addresses(sid = nil); end
  def applications(sid = nil); end
  def authorized_connect_apps(connect_app_sid = nil); end
  def available_phone_numbers(country_code = nil); end
  def balance; end
  def calls(sid = nil); end
  def conferences(sid = nil); end
  def connect_apps(sid = nil); end
  def incoming_phone_numbers(sid = nil); end
  def initialize(domain); end
  def keys(sid = nil); end
  def messages(sid = nil); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = nil); end
  def outgoing_caller_ids(sid = nil); end
  def queues(sid = nil); end
  def recordings(sid = nil); end
  def short_codes(sid = nil); end
  def signing_keys(sid = nil); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = nil); end
  def usage; end
  def validation_requests; end
end
class Twilio::REST::Api::V2010::AccountList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(friendly_name: nil, status: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext < Twilio::REST::InstanceContext
  def addresses(sid = nil); end
  def applications(sid = nil); end
  def authorized_connect_apps(connect_app_sid = nil); end
  def available_phone_numbers(country_code = nil); end
  def balance; end
  def calls(sid = nil); end
  def conferences(sid = nil); end
  def connect_apps(sid = nil); end
  def fetch; end
  def incoming_phone_numbers(sid = nil); end
  def initialize(version, sid); end
  def inspect; end
  def keys(sid = nil); end
  def messages(sid = nil); end
  def new_keys; end
  def new_signing_keys; end
  def notifications(sid = nil); end
  def outgoing_caller_ids(sid = nil); end
  def queues(sid = nil); end
  def recordings(sid = nil); end
  def short_codes(sid = nil); end
  def signing_keys(sid = nil); end
  def sip; end
  def to_s; end
  def tokens; end
  def transcriptions(sid = nil); end
  def update(friendly_name: nil, status: nil); end
  def usage; end
  def validation_requests; end
end
class Twilio::REST::Api::V2010::AccountInstance < Twilio::REST::InstanceResource
  def addresses; end
  def applications; end
  def auth_token; end
  def authorized_connect_apps; end
  def available_phone_numbers; end
  def balance; end
  def calls; end
  def conferences; end
  def connect_apps; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def incoming_phone_numbers; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def keys; end
  def messages; end
  def new_keys; end
  def new_signing_keys; end
  def notifications; end
  def outgoing_caller_ids; end
  def owner_account_sid; end
  def queues; end
  def recordings; end
  def short_codes; end
  def sid; end
  def signing_keys; end
  def sip; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def tokens; end
  def transcriptions; end
  def type; end
  def update(friendly_name: nil, status: nil); end
  def uri; end
  def usage; end
  def validation_requests; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageList < Twilio::REST::ListResource
  def create(to: nil, status_callback: nil, application_sid: nil, max_price: nil, provide_feedback: nil, validity_period: nil, force_delivery: nil, smart_encoded: nil, from: nil, messaging_service_sid: nil, body: nil, media_url: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, limit: nil, page_size: nil); end
  def page(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(to: nil, from: nil, date_sent_before: nil, date_sent: nil, date_sent_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def feedback; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def media(sid = nil); end
  def to_s; end
  def update(body: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def body; end
  def context; end
  def date_created; end
  def date_sent; end
  def date_updated; end
  def delete; end
  def direction; end
  def error_code; end
  def error_message; end
  def feedback; end
  def fetch; end
  def from; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def media; end
  def messaging_service_sid; end
  def num_media; end
  def num_segments; end
  def price; end
  def price_unit; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to; end
  def to_s; end
  def update(body: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, country_code); end
  def inspect; end
  def local; end
  def machine_to_machine; end
  def mobile; end
  def national; end
  def shared_cost; end
  def to_s; end
  def toll_free; end
  def voip; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryInstance < Twilio::REST::InstanceResource
  def beta; end
  def context; end
  def country; end
  def country_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def local; end
  def machine_to_machine; end
  def mobile; end
  def national; end
  def shared_cost; end
  def subresource_uris; end
  def to_s; end
  def toll_free; end
  def uri; end
  def voip; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext < Twilio::REST::InstanceContext
  def delete; end
  def feedback; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def notifications(sid = nil); end
  def recordings(sid = nil); end
  def to_s; end
  def update(url: nil, method: nil, status: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, status_callback_method: nil, twiml: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, call_sid: nil); end
  def list(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, limit: nil, page_size: nil); end
  def page(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, call_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::NotificationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def call_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, call_sid: nil, sid: nil); end
  def inspect; end
  def log; end
  def message_date; end
  def message_text; end
  def more_info; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def response_body; end
  def response_headers; end
  def sid; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::CallList < Twilio::REST::ListResource
  def create(to: nil, from: nil, method: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, status_callback_event: nil, status_callback_method: nil, send_digits: nil, timeout: nil, record: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, sip_auth_username: nil, sip_auth_password: nil, machine_detection: nil, machine_detection_timeout: nil, recording_status_callback_event: nil, trim: nil, caller_id: nil, machine_detection_speech_threshold: nil, machine_detection_speech_end_threshold: nil, machine_detection_silence_timeout: nil, url: nil, application_sid: nil); end
  def each; end
  def feedback_summaries(sid = nil); end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(to: nil, from: nil, parent_call_sid: nil, status: nil, start_time_before: nil, start_time: nil, start_time_after: nil, end_time_before: nil, end_time: nil, end_time_after: nil, limit: nil, page_size: nil); end
  def page(to: nil, from: nil, parent_call_sid: nil, status: nil, start_time_before: nil, start_time: nil, start_time_after: nil, end_time_before: nil, end_time: nil, end_time_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(to: nil, from: nil, parent_call_sid: nil, status: nil, start_time_before: nil, start_time: nil, start_time_after: nil, end_time_before: nil, end_time: nil, end_time_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryList < Twilio::REST::ListResource
  def create(start_date: nil, end_date: nil, include_subaccounts: nil, status_callback: nil, status_callback_method: nil); end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallList::FeedbackSummaryInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def call_count; end
  def call_feedback_count; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def end_date; end
  def fetch; end
  def include_subaccounts; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def issues; end
  def quality_score_average; end
  def quality_score_median; end
  def quality_score_standard_deviation; end
  def sid; end
  def start_date; end
  def status; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackList < Twilio::REST::ListResource
  def initialize(version, account_sid: nil, call_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackContext < Twilio::REST::InstanceContext
  def create(quality_score: nil, issue: nil); end
  def fetch; end
  def initialize(version, account_sid, call_sid); end
  def inspect; end
  def to_s; end
  def update(quality_score: nil, issue: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::FeedbackInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def create(quality_score: nil, issue: nil); end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, call_sid: nil); end
  def inspect; end
  def issues; end
  def quality_score; end
  def sid; end
  def to_s; end
  def update(quality_score: nil, issue: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingList < Twilio::REST::ListResource
  def create(recording_status_callback_event: nil, recording_status_callback: nil, recording_status_callback_method: nil, trim: nil, recording_channels: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, call_sid: nil); end
  def list(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def page(date_created_before: nil, date_created: nil, date_created_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, call_sid, sid); end
  def inspect; end
  def to_s; end
  def update(status: nil, pause_behavior: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::CallContext::RecordingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, call_sid: nil, sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def to_s; end
  def update(status: nil, pause_behavior: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::NotificationList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, limit: nil, page_size: nil); end
  def page(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(log: nil, message_date_before: nil, message_date: nil, message_date_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NotificationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NotificationContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NotificationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def call_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def log; end
  def message_date; end
  def message_text; end
  def more_info; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def response_body; end
  def response_headers; end
  def sid; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::ValidationRequestList < Twilio::REST::ListResource
  def create(phone_number: nil, friendly_name: nil, call_delay: nil, extension: nil, status_callback: nil, status_callback_method: nil); end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ValidationRequestPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ValidationRequestInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def call_sid; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def phone_number; end
  def to_s; end
  def validation_code; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobileList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobilePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MobileInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::LocalInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::NationalInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::VoipInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::SharedCostInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachineList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachinePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::MachineToMachineInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreeList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, country_code: nil); end
  def list(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def page(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(area_code: nil, contains: nil, sms_enabled: nil, mms_enabled: nil, voice_enabled: nil, exclude_all_address_required: nil, exclude_local_address_required: nil, exclude_foreign_address_required: nil, beta: nil, near_number: nil, near_lat_long: nil, distance: nil, in_postal_code: nil, in_region: nil, in_rate_center: nil, in_lata: nil, in_locality: nil, fax_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AvailablePhoneNumberCountryContext::TollFreeInstance < Twilio::REST::InstanceResource
  def address_requirements; end
  def beta; end
  def capabilities; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, country_code: nil); end
  def inspect; end
  def iso_country; end
  def lata; end
  def latitude; end
  def locality; end
  def longitude; end
  def phone_number; end
  def postal_code; end
  def rate_center; end
  def region; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::QueueList < Twilio::REST::ListResource
  def create(friendly_name: nil, max_size: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::QueuePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::QueueContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def members(call_sid = nil); end
  def to_s; end
  def update(friendly_name: nil, max_size: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::QueueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def average_wait_time; end
  def context; end
  def current_size; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def max_size; end
  def members; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, max_size: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList < Twilio::REST::ListResource
  def create(api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, emergency_status: nil, emergency_address_sid: nil, trunk_sid: nil, identity_sid: nil, address_sid: nil, voice_receive_mode: nil, phone_number: nil, area_code: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def local; end
  def mobile; end
  def page(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def to_s; end
  def toll_free; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext < Twilio::REST::InstanceContext
  def assigned_add_ons(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(account_sid: nil, api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, emergency_status: nil, emergency_address_sid: nil, trunk_sid: nil, voice_receive_mode: nil, identity_sid: nil, address_sid: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def assigned_add_ons; end
  def beta; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def emergency_address_sid; end
  def emergency_status; end
  def fetch; end
  def friendly_name; end
  def identity_sid; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def update(account_sid: nil, api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, emergency_status: nil, emergency_address_sid: nil, trunk_sid: nil, voice_receive_mode: nil, identity_sid: nil, address_sid: nil); end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::TokenList < Twilio::REST::ListResource
  def create(ttl: nil); end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::TokenPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::TokenInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def date_created; end
  def date_updated; end
  def ice_servers; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def password; end
  def to_s; end
  def ttl; end
  def username; end
end
class Twilio::REST::Api::V2010::AccountContext::KeyList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::KeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::KeyContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::KeyInstance < Twilio::REST::InstanceResource
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList < Twilio::REST::ListResource
  def credential_lists(sid = nil); end
  def domains(sid = nil); end
  def initialize(version, account_sid: nil); end
  def ip_access_control_lists(sid = nil); end
  def regions; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SigningKeyList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SigningKeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SigningKeyContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SigningKeyInstance < Twilio::REST::InstanceResource
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext < Twilio::REST::InstanceContext
  def credentials(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialList < Twilio::REST::ListResource
  def create(username: nil, password: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, credential_list_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, credential_list_sid, sid); end
  def inspect; end
  def to_s; end
  def update(password: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListContext::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def credential_list_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, credential_list_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(password: nil); end
  def uri; end
  def username; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def ip_addresses(sid = nil); end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressList < Twilio::REST::ListResource
  def create(friendly_name: nil, ip_address: nil, cidr_prefix_length: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, ip_access_control_list_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, ip_access_control_list_sid, sid); end
  def inspect; end
  def to_s; end
  def update(ip_address: nil, friendly_name: nil, cidr_prefix_length: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListContext::IpAddressInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def cidr_prefix_length; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, ip_access_control_list_sid: nil, sid: nil); end
  def inspect; end
  def ip_access_control_list_sid; end
  def ip_address; end
  def sid; end
  def to_s; end
  def update(ip_address: nil, friendly_name: nil, cidr_prefix_length: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext < Twilio::REST::InstanceContext
  def auth; end
  def credential_list_mappings(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def ip_access_control_list_mappings(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_status_callback_method: nil, voice_status_callback_url: nil, voice_url: nil, sip_registration: nil, domain_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList < Twilio::REST::ListResource
  def calls; end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def registrations; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList < Twilio::REST::ListResource
  def credential_list_mappings(sid = nil); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def ip_access_control_list_mappings(sid = nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingList < Twilio::REST::ListResource
  def create(credential_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, domain_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsCredentialListMappingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, domain_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingList < Twilio::REST::ListResource
  def create(ip_access_control_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, domain_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsList::AuthCallsIpAccessControlListMappingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, domain_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList < Twilio::REST::ListResource
  def credential_list_mappings(sid = nil); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingList < Twilio::REST::ListResource
  def create(credential_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, domain_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsList::AuthRegistrationsCredentialListMappingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, domain_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeRegistrationsInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: nil, domain_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesList::AuthTypeCallsInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: nil, domain_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingList < Twilio::REST::ListResource
  def create(credential_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, domain_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::CredentialListMappingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, domain_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::AuthTypesInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: nil, domain_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingList < Twilio::REST::ListResource
  def create(ip_access_control_list_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, domain_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, domain_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainContext::IpAccessControlListMappingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, domain_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::IpAccessControlListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def ip_addresses; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainList < Twilio::REST::ListResource
  def create(domain_name: nil, friendly_name: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, voice_status_callback_url: nil, voice_status_callback_method: nil, sip_registration: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::DomainInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def auth; end
  def auth_type; end
  def context; end
  def credential_list_mappings; end
  def date_created; end
  def date_updated; end
  def delete; end
  def domain_name; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def ip_access_control_list_mappings; end
  def sid; end
  def sip_registration; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_status_callback_method: nil, voice_status_callback_url: nil, voice_url: nil, sip_registration: nil, domain_name: nil); end
  def uri; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_status_callback_method; end
  def voice_status_callback_url; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::SipList::CredentialListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def credentials; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def update(friendly_name: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, limit: nil, page_size: nil); end
  def page(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_before: nil, date_created: nil, date_created_after: nil, date_updated_before: nil, date_updated: nil, date_updated_after: nil, friendly_name: nil, status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferencePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def participants(call_sid = nil); end
  def recordings(sid = nil); end
  def to_s; end
  def update(status: nil, announce_url: nil, announce_method: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def participants; end
  def recordings; end
  def region; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def update(status: nil, announce_url: nil, announce_method: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::CallPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::CallInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def annotation; end
  def answered_by; end
  def api_version; end
  def caller_name; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def direction; end
  def duration; end
  def end_time; end
  def feedback; end
  def fetch; end
  def forwarded_from; end
  def from; end
  def from_formatted; end
  def group_sid; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def notifications; end
  def parent_call_sid; end
  def phone_number_sid; end
  def price; end
  def price_unit; end
  def recordings; end
  def sid; end
  def start_time; end
  def status; end
  def subresource_uris; end
  def to; end
  def to_formatted; end
  def to_s; end
  def update(url: nil, method: nil, status: nil, fallback_url: nil, fallback_method: nil, status_callback: nil, status_callback_method: nil, twiml: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::NewKeyList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NewKeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NewKeyInstance < Twilio::REST::InstanceResource
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ShortCodeList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(friendly_name: nil, short_code: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, short_code: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, short_code: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ShortCodePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ShortCodeContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, api_version: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ShortCodeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def short_code; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def to_s; end
  def update(friendly_name: nil, api_version: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, connect_app_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AuthorizedConnectAppInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def connect_app_company_name; end
  def connect_app_description; end
  def connect_app_friendly_name; end
  def connect_app_homepage_url; end
  def connect_app_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, connect_app_sid: nil); end
  def inspect; end
  def permissions; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressList < Twilio::REST::ListResource
  def create(customer_name: nil, street: nil, city: nil, region: nil, postal_code: nil, iso_country: nil, friendly_name: nil, emergency_enabled: nil, auto_correct_address: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(customer_name: nil, friendly_name: nil, iso_country: nil, limit: nil, page_size: nil); end
  def page(customer_name: nil, friendly_name: nil, iso_country: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(customer_name: nil, friendly_name: nil, iso_country: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressContext < Twilio::REST::InstanceContext
  def delete; end
  def dependent_phone_numbers; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, customer_name: nil, street: nil, city: nil, region: nil, postal_code: nil, emergency_enabled: nil, auto_correct_address: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::AddressInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def city; end
  def context; end
  def customer_name; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dependent_phone_numbers; end
  def emergency_enabled; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def iso_country; end
  def postal_code; end
  def region; end
  def sid; end
  def street; end
  def to_s; end
  def update(friendly_name: nil, customer_name: nil, street: nil, city: nil, region: nil, postal_code: nil, emergency_enabled: nil, auto_correct_address: nil); end
  def uri; end
  def validated; end
  def verified; end
end
class Twilio::REST::Api::V2010::AccountContext::ApplicationList < Twilio::REST::ListResource
  def create(api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(friendly_name: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ApplicationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ApplicationContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ApplicationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def message_status_callback; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_status_callback; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def update(friendly_name: nil, api_version: nil, voice_url: nil, voice_method: nil, voice_fallback_url: nil, voice_fallback_method: nil, status_callback: nil, status_callback_method: nil, voice_caller_id_lookup: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, sms_status_callback: nil, message_status_callback: nil); end
  def uri; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList < Twilio::REST::ListResource
  def initialize(version, account_sid: nil); end
  def records; end
  def to_s; end
  def triggers(sid = nil); end
end
class Twilio::REST::Api::V2010::AccountContext::UsagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext < Twilio::REST::InstanceContext
  def add_on_results(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def transcriptions(sid = nil); end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, reference_sid, sid); end
  def inspect; end
  def payloads(sid = nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, reference_sid: nil, add_on_result_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, reference_sid, add_on_result_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultContext::PayloadInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def add_on_configuration_sid; end
  def add_on_result_sid; end
  def add_on_sid; end
  def content_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, reference_sid: nil, add_on_result_sid: nil, sid: nil); end
  def inspect; end
  def label; end
  def reference_sid; end
  def sid; end
  def subresource_uris; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, reference_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::AddOnResultInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def add_on_configuration_sid; end
  def add_on_sid; end
  def context; end
  def date_completed; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, reference_sid: nil, sid: nil); end
  def inspect; end
  def payloads; end
  def reference_sid; end
  def sid; end
  def status; end
  def subresource_uris; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, recording_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, recording_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingContext::TranscriptionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, recording_sid: nil, sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def recording_sid; end
  def sid; end
  def status; end
  def to_s; end
  def transcription_text; end
  def type; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::BalanceList < Twilio::REST::ListResource
  def fetch; end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::BalancePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::BalanceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def balance; end
  def currency; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList < Twilio::REST::ListResource
  def all_time; end
  def daily; end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def last_month; end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def monthly; end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def this_month; end
  def to_s; end
  def today; end
  def yearly; end
  def yesterday; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::MonthlyInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::LastMonthInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YearlyInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::DailyInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::ThisMonthInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::YesterdayInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimeList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::AllTimeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def page(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(category: nil, start_date: nil, end_date: nil, include_subaccounts: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordList::TodayInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::RecordInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def as_of; end
  def category; end
  def count; end
  def count_unit; end
  def description; end
  def end_date; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def start_date; end
  def subresource_uris; end
  def to_s; end
  def uri; end
  def usage; end
  def usage_unit; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerList < Twilio::REST::ListResource
  def create(callback_url: nil, trigger_value: nil, usage_category: nil, callback_method: nil, friendly_name: nil, recurring: nil, trigger_by: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(recurring: nil, trigger_by: nil, usage_category: nil, limit: nil, page_size: nil); end
  def page(recurring: nil, trigger_by: nil, usage_category: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(recurring: nil, trigger_by: nil, usage_category: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(callback_method: nil, callback_url: nil, friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::UsageList::TriggerInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def callback_method; end
  def callback_url; end
  def context; end
  def current_value; end
  def date_created; end
  def date_fired; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def recurring; end
  def sid; end
  def to_s; end
  def trigger_by; end
  def trigger_value; end
  def update(callback_method: nil, callback_url: nil, friendly_name: nil); end
  def uri; end
  def usage_category; end
  def usage_record_uri; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantList < Twilio::REST::ListResource
  def create(from: nil, to: nil, status_callback: nil, status_callback_method: nil, status_callback_event: nil, timeout: nil, record: nil, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, early_media: nil, max_participants: nil, conference_record: nil, conference_trim: nil, conference_status_callback: nil, conference_status_callback_method: nil, conference_status_callback_event: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, sip_auth_username: nil, sip_auth_password: nil, region: nil, conference_recording_status_callback: nil, conference_recording_status_callback_method: nil, recording_status_callback_event: nil, conference_recording_status_callback_event: nil, coaching: nil, call_sid_to_coach: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, conference_sid: nil); end
  def list(muted: nil, hold: nil, coaching: nil, limit: nil, page_size: nil); end
  def page(muted: nil, hold: nil, coaching: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(muted: nil, hold: nil, coaching: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, conference_sid, call_sid); end
  def inspect; end
  def to_s; end
  def update(muted: nil, hold: nil, hold_url: nil, hold_method: nil, announce_url: nil, announce_method: nil, wait_url: nil, wait_method: nil, beep_on_exit: nil, end_conference_on_exit: nil, coaching: nil, call_sid_to_coach: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::ParticipantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def call_sid; end
  def call_sid_to_coach; end
  def coaching; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def end_conference_on_exit; end
  def fetch; end
  def hold; end
  def initialize(version, payload, account_sid: nil, conference_sid: nil, call_sid: nil); end
  def inspect; end
  def muted; end
  def start_conference_on_enter; end
  def status; end
  def to_s; end
  def update(muted: nil, hold: nil, hold_url: nil, hold_method: nil, announce_url: nil, announce_method: nil, wait_url: nil, wait_method: nil, beep_on_exit: nil, end_conference_on_exit: nil, coaching: nil, call_sid_to_coach: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, conference_sid: nil); end
  def list(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def page(date_created_before: nil, date_created: nil, date_created_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, conference_sid, sid); end
  def inspect; end
  def to_s; end
  def update(status: nil, pause_behavior: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ConferenceContext::RecordingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, conference_sid: nil, sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def to_s; end
  def update(status: nil, pause_behavior: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, address_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::AddressContext::DependentPhoneNumberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def api_version; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def emergency_address_sid; end
  def emergency_status; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, address_sid: nil); end
  def inspect; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::ConnectAppList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConnectAppPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::ConnectAppContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(authorize_redirect_url: nil, company_name: nil, deauthorize_callback_method: nil, deauthorize_callback_url: nil, description: nil, friendly_name: nil, homepage_url: nil, permissions: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::ConnectAppInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def authorize_redirect_url; end
  def company_name; end
  def context; end
  def deauthorize_callback_method; end
  def deauthorize_callback_url; end
  def delete; end
  def description; end
  def fetch; end
  def friendly_name; end
  def homepage_url; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def permissions; end
  def sid; end
  def to_s; end
  def update(authorize_redirect_url: nil, company_name: nil, deauthorize_callback_method: nil, deauthorize_callback_url: nil, description: nil, friendly_name: nil, homepage_url: nil, permissions: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::TranscriptionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::TranscriptionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::TranscriptionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::TranscriptionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def recording_sid; end
  def sid; end
  def status; end
  def to_s; end
  def transcription_text; end
  def type; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobileList < Twilio::REST::ListResource
  def create(phone_number: nil, api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, identity_sid: nil, address_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def page(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobilePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::MobileInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def identity_sid; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalList < Twilio::REST::ListResource
  def create(phone_number: nil, api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, identity_sid: nil, address_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def page(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::LocalInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def identity_sid; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnList < Twilio::REST::ListResource
  def create(installed_add_on_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, resource_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext < Twilio::REST::InstanceContext
  def delete; end
  def extensions(sid = nil); end
  def fetch; end
  def initialize(version, account_sid, resource_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, resource_sid: nil, sid: nil); end
  def inspect; end
  def resource_sid; end
  def sid; end
  def subresource_uris; end
  def to_s; end
  def unique_name; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, resource_sid: nil, assigned_add_on_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, resource_sid, assigned_add_on_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberContext::AssignedAddOnContext::AssignedAddOnExtensionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assigned_add_on_sid; end
  def context; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, resource_sid: nil, assigned_add_on_sid: nil, sid: nil); end
  def inspect; end
  def product_name; end
  def resource_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreeList < Twilio::REST::ListResource
  def create(phone_number: nil, api_version: nil, friendly_name: nil, sms_application_sid: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, status_callback: nil, status_callback_method: nil, voice_application_sid: nil, voice_caller_id_lookup: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, identity_sid: nil, address_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def page(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(beta: nil, friendly_name: nil, phone_number: nil, origin: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::IncomingPhoneNumberList::TollFreeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_requirements; end
  def address_sid; end
  def api_version; end
  def beta; end
  def capabilities; end
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def identity_sid; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def origin; end
  def phone_number; end
  def sid; end
  def sms_application_sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trunk_sid; end
  def uri; end
  def voice_application_sid; end
  def voice_caller_id_lookup; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(phone_number: nil, friendly_name: nil, limit: nil, page_size: nil); end
  def page(phone_number: nil, friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(phone_number: nil, friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::OutgoingCallerIdInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def phone_number; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, queue_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, account_sid, queue_sid, call_sid); end
  def inspect; end
  def to_s; end
  def update(url: nil, method: nil); end
end
class Twilio::REST::Api::V2010::AccountContext::QueueContext::MemberInstance < Twilio::REST::InstanceResource
  def call_sid; end
  def context; end
  def date_enqueued; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, queue_sid: nil, call_sid: nil); end
  def inspect; end
  def position; end
  def queue_sid; end
  def to_s; end
  def update(url: nil, method: nil); end
  def uri; end
  def wait_time; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackList < Twilio::REST::ListResource
  def create(outcome: nil); end
  def initialize(version, account_sid: nil, message_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::FeedbackInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def date_created; end
  def date_updated; end
  def initialize(version, payload, account_sid: nil, message_sid: nil); end
  def inspect; end
  def message_sid; end
  def outcome; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil, message_sid: nil); end
  def list(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def page(date_created_before: nil, date_created: nil, date_created_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_before: nil, date_created: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, account_sid, message_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::MessageContext::MediaInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def content_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, message_sid: nil, sid: nil); end
  def inspect; end
  def parent_sid; end
  def sid; end
  def to_s; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, account_sid: nil); end
  def list(date_created_before: nil, date_created: nil, date_created_after: nil, call_sid: nil, conference_sid: nil, limit: nil, page_size: nil); end
  def page(date_created_before: nil, date_created: nil, date_created_after: nil, call_sid: nil, conference_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_before: nil, date_created: nil, date_created_after: nil, call_sid: nil, conference_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::RecordingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def add_on_results; end
  def api_version; end
  def call_sid; end
  def channels; end
  def conference_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def duration; end
  def encryption_details; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, account_sid: nil, sid: nil); end
  def inspect; end
  def price; end
  def price_unit; end
  def sid; end
  def source; end
  def start_time; end
  def status; end
  def subresource_uris; end
  def to_s; end
  def transcriptions; end
  def uri; end
end
class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def initialize(version, account_sid: nil); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Api::V2010::AccountContext::NewSigningKeyInstance < Twilio::REST::InstanceResource
  def date_created; end
  def date_updated; end
  def friendly_name; end
  def initialize(version, payload, account_sid: nil); end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Chat::V1 < Twilio::REST::Version
  def credentials(sid = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::CredentialList < Twilio::REST::ListResource
  def create(type: nil, friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
end
class Twilio::REST::Chat::V1::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def url; end
end
class Twilio::REST::Chat::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext < Twilio::REST::InstanceContext
  def channels(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def roles(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, webhooks_on_message_send_url: nil, webhooks_on_message_send_method: nil, webhooks_on_message_update_url: nil, webhooks_on_message_update_method: nil, webhooks_on_message_remove_url: nil, webhooks_on_message_remove_method: nil, webhooks_on_channel_add_url: nil, webhooks_on_channel_add_method: nil, webhooks_on_channel_destroy_url: nil, webhooks_on_channel_destroy_method: nil, webhooks_on_channel_update_url: nil, webhooks_on_channel_update_method: nil, webhooks_on_member_add_url: nil, webhooks_on_member_add_method: nil, webhooks_on_member_remove_url: nil, webhooks_on_member_remove_method: nil, webhooks_on_message_sent_url: nil, webhooks_on_message_sent_method: nil, webhooks_on_message_updated_url: nil, webhooks_on_message_updated_method: nil, webhooks_on_message_removed_url: nil, webhooks_on_message_removed_method: nil, webhooks_on_channel_added_url: nil, webhooks_on_channel_added_method: nil, webhooks_on_channel_destroyed_url: nil, webhooks_on_channel_destroyed_method: nil, webhooks_on_channel_updated_url: nil, webhooks_on_channel_updated_method: nil, webhooks_on_member_added_url: nil, webhooks_on_member_added_method: nil, webhooks_on_member_removed_url: nil, webhooks_on_member_removed_method: nil, limits_channel_members: nil, limits_user_channels: nil); end
  def users(sid = nil); end
end
class Twilio::REST::Chat::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def limits; end
  def links; end
  def notifications; end
  def post_webhook_url; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, webhooks_on_message_send_url: nil, webhooks_on_message_send_method: nil, webhooks_on_message_update_url: nil, webhooks_on_message_update_method: nil, webhooks_on_message_remove_url: nil, webhooks_on_message_remove_method: nil, webhooks_on_channel_add_url: nil, webhooks_on_channel_add_method: nil, webhooks_on_channel_destroy_url: nil, webhooks_on_channel_destroy_method: nil, webhooks_on_channel_update_url: nil, webhooks_on_channel_update_method: nil, webhooks_on_member_add_url: nil, webhooks_on_member_add_method: nil, webhooks_on_member_remove_url: nil, webhooks_on_member_remove_method: nil, webhooks_on_message_sent_url: nil, webhooks_on_message_sent_method: nil, webhooks_on_message_updated_url: nil, webhooks_on_message_updated_method: nil, webhooks_on_message_removed_url: nil, webhooks_on_message_removed_method: nil, webhooks_on_channel_added_url: nil, webhooks_on_channel_added_method: nil, webhooks_on_channel_destroyed_url: nil, webhooks_on_channel_destroyed_method: nil, webhooks_on_channel_updated_url: nil, webhooks_on_channel_updated_method: nil, webhooks_on_member_added_url: nil, webhooks_on_member_added_method: nil, webhooks_on_member_removed_url: nil, webhooks_on_member_removed_method: nil, limits_channel_members: nil, limits_user_channels: nil); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
  def webhooks; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, attributes: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def user_channels; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def url; end
  def user_channels; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def invites(sid = nil); end
  def members(sid = nil); end
  def messages(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil); end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageList < Twilio::REST::ListResource
  def create(body: nil, from: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(order: nil, limit: nil, page_size: nil); end
  def page(order: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(body: nil, attributes: nil); end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def update(body: nil, attributes: nil); end
  def url; end
  def was_edited; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil); end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::MemberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil); end
  def url; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InvitePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelContext::InviteInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::UserContext::UserChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def initialize(version, payload, service_sid: nil, user_sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelList < Twilio::REST::ListResource
  def create(friendly_name: nil, unique_name: nil, attributes: nil, type: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(type: nil, limit: nil, page_size: nil); end
  def page(type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::ChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::Chat::V1::ServiceContext::RoleList < Twilio::REST::ListResource
  def create(friendly_name: nil, type: nil, permission: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::RolePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V1::ServiceContext::RoleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(permission: nil); end
end
class Twilio::REST::Chat::V1::ServiceContext::RoleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: nil); end
  def url; end
end
class Twilio::REST::Chat::V2 < Twilio::REST::Version
  def credentials(sid = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::CredentialList < Twilio::REST::ListResource
  def create(type: nil, friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
end
class Twilio::REST::Chat::V2::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def url; end
end
class Twilio::REST::Chat::V2::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext < Twilio::REST::InstanceContext
  def bindings(sid = nil); end
  def channels(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def roles(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_new_message_sound: nil, notifications_new_message_badge_count_enabled: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_added_to_channel_sound: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_removed_from_channel_sound: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, notifications_invited_to_channel_sound: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, limits_channel_members: nil, limits_user_channels: nil, media_compatibility_message: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, notifications_log_enabled: nil); end
  def users(sid = nil); end
end
class Twilio::REST::Chat::V2::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def bindings; end
  def channels; end
  def consumption_report_interval; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_channel_creator_role_sid; end
  def default_channel_role_sid; end
  def default_service_role_sid; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def limits; end
  def links; end
  def media; end
  def notifications; end
  def post_webhook_retry_count; end
  def post_webhook_url; end
  def pre_webhook_retry_count; end
  def pre_webhook_url; end
  def reachability_enabled; end
  def read_status_enabled; end
  def roles; end
  def sid; end
  def to_s; end
  def typing_indicator_timeout; end
  def update(friendly_name: nil, default_service_role_sid: nil, default_channel_role_sid: nil, default_channel_creator_role_sid: nil, read_status_enabled: nil, reachability_enabled: nil, typing_indicator_timeout: nil, consumption_report_interval: nil, notifications_new_message_enabled: nil, notifications_new_message_template: nil, notifications_new_message_sound: nil, notifications_new_message_badge_count_enabled: nil, notifications_added_to_channel_enabled: nil, notifications_added_to_channel_template: nil, notifications_added_to_channel_sound: nil, notifications_removed_from_channel_enabled: nil, notifications_removed_from_channel_template: nil, notifications_removed_from_channel_sound: nil, notifications_invited_to_channel_enabled: nil, notifications_invited_to_channel_template: nil, notifications_invited_to_channel_sound: nil, pre_webhook_url: nil, post_webhook_url: nil, webhook_method: nil, webhook_filters: nil, limits_channel_members: nil, limits_user_channels: nil, media_compatibility_message: nil, pre_webhook_retry_count: nil, post_webhook_retry_count: nil, notifications_log_enabled: nil); end
  def url; end
  def users; end
  def webhook_filters; end
  def webhook_method; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, attributes: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def user_bindings(sid = nil); end
  def user_channels(channel_sid = nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::UserInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_notifiable; end
  def is_online; end
  def joined_channels_count; end
  def links; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, attributes: nil, friendly_name: nil); end
  def url; end
  def user_bindings; end
  def user_channels; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def invites(sid = nil); end
  def members(sid = nil); end
  def messages(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def webhooks(sid = nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageList < Twilio::REST::ListResource
  def create(from: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, body: nil, media_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(order: nil, limit: nil, page_size: nil); end
  def page(order: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(body: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, from: nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MessageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def body; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def from; end
  def index; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_updated_by; end
  def media; end
  def service_sid; end
  def sid; end
  def to; end
  def to_s; end
  def type; end
  def update(body: nil, attributes: nil, date_created: nil, date_updated: nil, last_updated_by: nil, from: nil); end
  def url; end
  def was_edited; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookList < Twilio::REST::ListResource
  def create(type: nil, configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(configuration_url: nil, configuration_method: nil, configuration_filters: nil, configuration_triggers: nil, configuration_flow_sid: nil, configuration_retry_count: nil); end
  def url; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::MemberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def channel_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def last_consumption_timestamp; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(role_sid: nil, last_consumed_message_index: nil, last_consumption_timestamp: nil, date_created: nil, date_updated: nil, attributes: nil); end
  def url; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteList < Twilio::REST::ListResource
  def create(identity: nil, role_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, channel_sid: nil); end
  def list(identity: nil, limit: nil, page_size: nil); end
  def page(identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InvitePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, channel_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelContext::InviteInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, channel_sid: nil, sid: nil); end
  def inspect; end
  def role_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, user_sid, channel_sid); end
  def inspect; end
  def to_s; end
  def update(notification_level: nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_sid; end
  def context; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, user_sid: nil, channel_sid: nil); end
  def inspect; end
  def last_consumed_message_index; end
  def links; end
  def member_sid; end
  def notification_level; end
  def service_sid; end
  def status; end
  def to_s; end
  def unread_messages_count; end
  def update(notification_level: nil); end
  def url; end
  def user_sid; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, user_sid: nil); end
  def list(binding_type: nil, limit: nil, page_size: nil); end
  def page(binding_type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(binding_type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, user_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::UserContext::UserBindingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, user_sid: nil, sid: nil); end
  def inspect; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def user_sid; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelList < Twilio::REST::ListResource
  def create(friendly_name: nil, unique_name: nil, attributes: nil, type: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(type: nil, limit: nil, page_size: nil); end
  def page(type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::ChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def invites; end
  def links; end
  def members; end
  def members_count; end
  def messages; end
  def messages_count; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, attributes: nil, date_created: nil, date_updated: nil, created_by: nil); end
  def url; end
  def webhooks; end
end
class Twilio::REST::Chat::V2::ServiceContext::BindingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(binding_type: nil, identity: nil, limit: nil, page_size: nil); end
  def page(binding_type: nil, identity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(binding_type: nil, identity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::BindingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::BindingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::BindingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def message_types; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Chat::V2::ServiceContext::RoleList < Twilio::REST::ListResource
  def create(friendly_name: nil, type: nil, permission: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::RolePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Chat::V2::ServiceContext::RoleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(permission: nil); end
end
class Twilio::REST::Chat::V2::ServiceContext::RoleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def permissions; end
  def service_sid; end
  def sid; end
  def to_s; end
  def type; end
  def update(permission: nil); end
  def url; end
end
class Twilio::REST::FlexApi::V1 < Twilio::REST::Version
  def channel(sid = nil); end
  def configuration; end
  def flex_flow(sid = nil); end
  def initialize(domain); end
  def to_s; end
  def web_channel(sid = nil); end
end
class Twilio::REST::FlexApi::V1::FlexFlowList < Twilio::REST::ListResource
  def create(friendly_name: nil, chat_service_sid: nil, channel_type: nil, contact_identity: nil, enabled: nil, integration_type: nil, integration_flow_sid: nil, integration_url: nil, integration_workspace_sid: nil, integration_workflow_sid: nil, integration_channel: nil, integration_timeout: nil, integration_priority: nil, integration_creation_on_message: nil, long_lived: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(friendly_name: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::FlexFlowPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::FlexFlowContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, chat_service_sid: nil, channel_type: nil, contact_identity: nil, enabled: nil, integration_type: nil, integration_flow_sid: nil, integration_url: nil, integration_workspace_sid: nil, integration_workflow_sid: nil, integration_channel: nil, integration_timeout: nil, integration_priority: nil, integration_creation_on_message: nil, long_lived: nil); end
end
class Twilio::REST::FlexApi::V1::FlexFlowInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_type; end
  def chat_service_sid; end
  def contact_identity; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def integration; end
  def integration_type; end
  def long_lived; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, chat_service_sid: nil, channel_type: nil, contact_identity: nil, enabled: nil, integration_type: nil, integration_flow_sid: nil, integration_url: nil, integration_workspace_sid: nil, integration_workflow_sid: nil, integration_channel: nil, integration_timeout: nil, integration_priority: nil, integration_creation_on_message: nil, long_lived: nil); end
  def url; end
end
class Twilio::REST::FlexApi::V1::ChannelList < Twilio::REST::ListResource
  def create(flex_flow_sid: nil, identity: nil, chat_user_friendly_name: nil, chat_friendly_name: nil, target: nil, chat_unique_name: nil, pre_engagement_data: nil, task_sid: nil, task_attributes: nil, long_lived: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::ChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::ChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::ChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def flex_flow_sid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def url; end
  def user_sid; end
end
class Twilio::REST::FlexApi::V1::WebChannelList < Twilio::REST::ListResource
  def create(flex_flow_sid: nil, identity: nil, customer_friendly_name: nil, chat_friendly_name: nil, chat_unique_name: nil, pre_engagement_data: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::WebChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::WebChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(chat_status: nil, post_engagement_data: nil); end
end
class Twilio::REST::FlexApi::V1::WebChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def flex_flow_sid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(chat_status: nil, post_engagement_data: nil); end
  def url; end
end
class Twilio::REST::FlexApi::V1::ConfigurationList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::ConfigurationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::FlexApi::V1::ConfigurationContext < Twilio::REST::InstanceContext
  def create; end
  def fetch(ui_version: nil); end
  def initialize(version); end
  def inspect; end
  def to_s; end
  def update; end
end
class Twilio::REST::FlexApi::V1::ConfigurationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def call_recording_enabled; end
  def call_recording_webhook_url; end
  def chat_service_instance_sid; end
  def context; end
  def create; end
  def crm_attributes; end
  def crm_callback_url; end
  def crm_enabled; end
  def crm_fallback_url; end
  def crm_type; end
  def date_created; end
  def date_updated; end
  def features_enabled; end
  def fetch(ui_version: nil); end
  def initialize(version, payload); end
  def inspect; end
  def integrations; end
  def messaging_service_instance_sid; end
  def outbound_call_flows; end
  def plugin_service_attributes; end
  def plugin_service_enabled; end
  def public_attributes; end
  def runtime_domain; end
  def serverless_service_sids; end
  def service_version; end
  def status; end
  def taskrouter_offline_activity_sid; end
  def taskrouter_skills; end
  def taskrouter_target_taskqueue_sid; end
  def taskrouter_target_workflow_sid; end
  def taskrouter_taskqueues; end
  def taskrouter_worker_attributes; end
  def taskrouter_worker_channels; end
  def taskrouter_workspace_sid; end
  def to_s; end
  def ui_attributes; end
  def ui_language; end
  def ui_version; end
  def update; end
  def url; end
end
class Twilio::REST::Monitor::V1 < Twilio::REST::Version
  def alerts(sid = nil); end
  def events(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Monitor::V1::AlertList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(log_level: nil, start_date: nil, end_date: nil, limit: nil, page_size: nil); end
  def page(log_level: nil, start_date: nil, end_date: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(log_level: nil, start_date: nil, end_date: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Monitor::V1::AlertPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Monitor::V1::AlertContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Monitor::V1::AlertInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def alert_text; end
  def api_version; end
  def context; end
  def date_created; end
  def date_generated; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def log_level; end
  def more_info; end
  def request_method; end
  def request_url; end
  def request_variables; end
  def resource_sid; end
  def response_body; end
  def response_headers; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Monitor::V1::EventList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(actor_sid: nil, event_type: nil, resource_sid: nil, source_ip_address: nil, start_date: nil, end_date: nil, limit: nil, page_size: nil); end
  def page(actor_sid: nil, event_type: nil, resource_sid: nil, source_ip_address: nil, start_date: nil, end_date: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(actor_sid: nil, event_type: nil, resource_sid: nil, source_ip_address: nil, start_date: nil, end_date: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Monitor::V1::EventPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Monitor::V1::EventContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Monitor::V1::EventInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def actor_sid; end
  def actor_type; end
  def context; end
  def description; end
  def event_data; end
  def event_date; end
  def event_type; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def resource_sid; end
  def resource_type; end
  def sid; end
  def source; end
  def source_ip_address; end
  def to_s; end
  def url; end
end
class Twilio::REST::Fax::V1 < Twilio::REST::Version
  def faxes(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxList < Twilio::REST::ListResource
  def create(to: nil, media_url: nil, quality: nil, status_callback: nil, from: nil, sip_auth_username: nil, sip_auth_password: nil, store_media: nil, ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(from: nil, to: nil, date_created_on_or_before: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def page(from: nil, to: nil, date_created_on_or_before: nil, date_created_after: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(from: nil, to: nil, date_created_on_or_before: nil, date_created_after: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def media(sid = nil); end
  def to_s; end
  def update(status: nil); end
end
class Twilio::REST::Fax::V1::FaxInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def api_version; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def direction; end
  def duration; end
  def fetch; end
  def from; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def media; end
  def media_sid; end
  def media_url; end
  def num_pages; end
  def price; end
  def price_unit; end
  def quality; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def update(status: nil); end
  def url; end
end
class Twilio::REST::Fax::V1::FaxContext::FaxMediaList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, fax_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxContext::FaxMediaPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxContext::FaxMediaContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, fax_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Fax::V1::FaxContext::FaxMediaInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def content_type; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fax_sid; end
  def fetch; end
  def initialize(version, payload, fax_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::DeployedDevices < Twilio::REST::Version
  def fleets(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Preview::Understand < Twilio::REST::Version
  def assistants(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports < Twilio::REST::Version
  def export_configuration(resource_type = nil); end
  def exports(resource_type = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Preview::Sync < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceList < Twilio::REST::ListResource
  def create(name: nil, code_length: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(name: nil, code_length: nil); end
  def verification_checks; end
  def verifications; end
end
class Twilio::REST::Preview::AccSecurity::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def code_length; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def to_s; end
  def update(name: nil, code_length: nil); end
  def url; end
  def verification_checks; end
  def verifications; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationList < Twilio::REST::ListResource
  def create(to: nil, channel: nil, custom_message: nil); end
  def initialize(version, service_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel; end
  def date_created; end
  def date_updated; end
  def initialize(version, payload, service_sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def valid; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationCheckList < Twilio::REST::ListResource
  def create(code: nil, to: nil); end
  def initialize(version, service_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationCheckPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::AccSecurity::ServiceContext::VerificationCheckInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel; end
  def date_created; end
  def date_updated; end
  def initialize(version, payload, service_sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def valid; end
end
class Twilio::REST::Preview::Wireless < Twilio::REST::Version
  def commands(sid = nil); end
  def initialize(domain); end
  def rate_plans(sid = nil); end
  def sims(sid = nil); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportConfigurationList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportConfigurationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportConfigurationContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, resource_type); end
  def inspect; end
  def to_s; end
  def update(enabled: nil, webhook_url: nil, webhook_method: nil); end
end
class Twilio::REST::Preview::BulkExports::ExportConfigurationInstance < Twilio::REST::InstanceResource
  def context; end
  def enabled; end
  def fetch; end
  def initialize(version, payload, resource_type: nil); end
  def inspect; end
  def resource_type; end
  def to_s; end
  def update(enabled: nil, webhook_url: nil, webhook_method: nil); end
  def url; end
  def webhook_method; end
  def webhook_url; end
end
class Twilio::REST::Preview::BulkExports::ExportList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportContext < Twilio::REST::InstanceContext
  def days; end
  def fetch; end
  def initialize(version, resource_type); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportInstance < Twilio::REST::InstanceResource
  def context; end
  def days; end
  def fetch; end
  def initialize(version, payload, resource_type: nil); end
  def inspect; end
  def links; end
  def resource_type; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::BulkExports::ExportContext::DayList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, resource_type: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportContext::DayPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::BulkExports::ExportContext::DayInstance < Twilio::REST::InstanceResource
  def day; end
  def initialize(version, payload, resource_type: nil); end
  def inspect; end
  def redirect_to; end
  def resource_type; end
  def size; end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext < Twilio::REST::InstanceContext
  def assistant_fallback_actions; end
  def assistant_initiation_actions; end
  def delete; end
  def dialogues(sid = nil); end
  def fetch; end
  def field_types(sid = nil); end
  def initialize(version, sid); end
  def inspect; end
  def model_builds(sid = nil); end
  def queries(sid = nil); end
  def style_sheet; end
  def tasks(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, fallback_actions: nil, initiation_actions: nil, style_sheet: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, actions: nil, actions_url: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def fields(sid = nil); end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def samples(sid = nil); end
  def statistics; end
  def task_actions; end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, actions: nil, actions_url: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def actions_url; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def samples; end
  def sid; end
  def statistics; end
  def task_actions; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, actions: nil, actions_url: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid); end
  def inspect; end
  def to_s; end
  def update(style_sheet: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::StyleSheetInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil); end
  def inspect; end
  def to_s; end
  def update(style_sheet: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildList < Twilio::REST::ListResource
  def create(status_callback: nil, unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::ModelBuildInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def build_duration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def field_values(sid = nil); end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_values; end
  def friendly_name; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueList < Twilio::REST::ListResource
  def create(language: nil, value: nil, synonym_of: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, field_type_sid: nil); end
  def list(language: nil, limit: nil, page_size: nil); end
  def page(language: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValuePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, field_type_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::FieldTypeContext::FieldValueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type_sid; end
  def initialize(version, payload, assistant_sid: nil, field_type_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def sid; end
  def synonym_of; end
  def to_s; end
  def url; end
  def value; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleList < Twilio::REST::ListResource
  def create(language: nil, tagged_text: nil, source_channel: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def list(language: nil, limit: nil, page_size: nil); end
  def page(language: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SamplePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, task_sid, sid); end
  def inspect; end
  def to_s; end
  def update(language: nil, tagged_text: nil, source_channel: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::SampleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def sid; end
  def source_channel; end
  def tagged_text; end
  def task_sid; end
  def to_s; end
  def update(language: nil, tagged_text: nil, source_channel: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldList < Twilio::REST::ListResource
  def create(field_type: nil, unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, task_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::FieldInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def unique_name; end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, task_sid); end
  def inspect; end
  def to_s; end
  def update(actions: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskActionsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil); end
  def inspect; end
  def task_sid; end
  def to_s; end
  def update(actions: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, task_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::TaskContext::TaskStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def fetch; end
  def fields_count; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil); end
  def inspect; end
  def samples_count; end
  def task_sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::QueryList < Twilio::REST::ListResource
  def create(language: nil, query: nil, tasks: nil, model_build: nil, field: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(language: nil, model_build: nil, status: nil, limit: nil, page_size: nil); end
  def page(language: nil, model_build: nil, status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, model_build: nil, status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::QueryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::QueryContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(sample_sid: nil, status: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::QueryInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def model_build_sid; end
  def query; end
  def results; end
  def sample_sid; end
  def sid; end
  def source_channel; end
  def status; end
  def to_s; end
  def update(sample_sid: nil, status: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid); end
  def inspect; end
  def to_s; end
  def update(fallback_actions: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantFallbackActionsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil); end
  def inspect; end
  def to_s; end
  def update(fallback_actions: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid); end
  def inspect; end
  def to_s; end
  def update(initiation_actions: nil); end
end
class Twilio::REST::Preview::Understand::AssistantContext::AssistantInitiationActionsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil); end
  def inspect; end
  def to_s; end
  def update(initiation_actions: nil); end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantContext::DialogueList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::DialoguePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::DialogueContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantContext::DialogueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Understand::AssistantList < Twilio::REST::ListResource
  def create(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, fallback_actions: nil, initiation_actions: nil, style_sheet: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Understand::AssistantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_fallback_actions; end
  def assistant_initiation_actions; end
  def callback_events; end
  def callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dialogues; end
  def fetch; end
  def field_types; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def latest_model_build_sid; end
  def links; end
  def log_queries; end
  def model_builds; end
  def queries; end
  def sid; end
  def style_sheet; end
  def tasks; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, fallback_actions: nil, initiation_actions: nil, style_sheet: nil); end
  def url; end
end
class Twilio::REST::Preview::Sync::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil, webhook_url: nil, reachability_webhooks_enabled: nil, acl_enabled: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext < Twilio::REST::InstanceContext
  def delete; end
  def documents(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def sync_lists(sid = nil); end
  def sync_maps(sid = nil); end
  def to_s; end
  def update(webhook_url: nil, friendly_name: nil, reachability_webhooks_enabled: nil, acl_enabled: nil); end
end
class Twilio::REST::Preview::Sync::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def acl_enabled; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def documents; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def reachability_webhooks_enabled; end
  def sid; end
  def sync_lists; end
  def sync_maps; end
  def to_s; end
  def update(webhook_url: nil, friendly_name: nil, reachability_webhooks_enabled: nil, acl_enabled: nil); end
  def url; end
  def webhook_url; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext < Twilio::REST::InstanceContext
  def delete; end
  def document_permissions(identity = nil); end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(data: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, document_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, document_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentContext::DocumentPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def document_sid; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, document_sid: nil, identity: nil); end
  def inspect; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListList < Twilio::REST::ListResource
  def create(unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def sync_list_items(index = nil); end
  def sync_list_permissions(identity = nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_list_items; end
  def sync_list_permissions; end
  def to_s; end
  def unique_name; end
  def url; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapList < Twilio::REST::ListResource
  def create(unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def sync_map_items(key = nil); end
  def sync_map_permissions(identity = nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_map_items; end
  def sync_map_permissions; end
  def to_s; end
  def unique_name; end
  def url; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemList < Twilio::REST::ListResource
  def create(key: nil, data: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, map_sid: nil); end
  def list(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def page(order: nil, from: nil, bounds: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, map_sid, key); end
  def inspect; end
  def to_s; end
  def update(data: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapItemInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, map_sid: nil, key: nil); end
  def inspect; end
  def key; end
  def map_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: nil); end
  def url; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, map_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, map_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncMapContext::SyncMapPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, map_sid: nil, identity: nil); end
  def inspect; end
  def manage; end
  def map_sid; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemList < Twilio::REST::ListResource
  def create(data: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, list_sid: nil); end
  def list(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def page(order: nil, from: nil, bounds: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, list_sid, index); end
  def inspect; end
  def to_s; end
  def update(data: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListItemInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def index; end
  def initialize(version, payload, service_sid: nil, list_sid: nil, index: nil); end
  def inspect; end
  def list_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: nil); end
  def url; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, list_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, list_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Preview::Sync::ServiceContext::SyncListContext::SyncListPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, list_sid: nil, identity: nil); end
  def inspect; end
  def list_sid; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentList < Twilio::REST::ListResource
  def create(unique_name: nil, data: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Sync::ServiceContext::DocumentInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def document_permissions; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(data: nil); end
  def url; end
end
class Twilio::REST::Preview::Marketplace < Twilio::REST::Version
  def available_add_ons(sid = nil); end
  def initialize(domain); end
  def installed_add_ons(sid = nil); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms < Twilio::REST::Version
  def branded_calls; end
  def cps; end
  def current_calls; end
  def devices; end
  def initialize(domain); end
  def phone_calls; end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::DeviceList < Twilio::REST::ListResource
  def create(phone_number: nil, push_token: nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::DevicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::DeviceInstance < Twilio::REST::InstanceResource
  def binding_sid; end
  def initialize(version, payload); end
  def inspect; end
  def phone_number; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::TrustedComms::BrandedCallList < Twilio::REST::ListResource
  def create(from: nil, to: nil, reason: nil, call_sid: nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::BrandedCallPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::BrandedCallInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def bg_color; end
  def caller; end
  def created_at; end
  def font_color; end
  def from; end
  def initialize(version, payload); end
  def inspect; end
  def logo; end
  def reason; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def url; end
  def use_case; end
end
class Twilio::REST::Preview::TrustedComms::CurrentCallList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CurrentCallPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CurrentCallContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CurrentCallInstance < Twilio::REST::InstanceResource
  def bg_color; end
  def caller; end
  def context; end
  def created_at; end
  def fetch; end
  def font_color; end
  def from; end
  def initialize(version, payload); end
  def inspect; end
  def logo; end
  def manager; end
  def reason; end
  def shield_img; end
  def sid; end
  def status; end
  def to; end
  def to_s; end
  def url; end
  def use_case; end
end
class Twilio::REST::Preview::TrustedComms::PhoneCallList < Twilio::REST::ListResource
  def create(from: nil, to: nil, reason: nil, application_sid: nil, caller_id: nil, fallback_method: nil, fallback_url: nil, machine_detection: nil, machine_detection_silence_timeout: nil, machine_detection_speech_end_threshold: nil, machine_detection_speech_threshold: nil, machine_detection_timeout: nil, method: nil, record: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_event: nil, recording_status_callback_method: nil, send_digits: nil, sip_auth_password: nil, sip_auth_username: nil, status_callback: nil, status_callback_event: nil, status_callback_method: nil, timeout: nil, trim: nil, url: nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::PhoneCallPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::PhoneCallInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def created_at; end
  def from; end
  def initialize(version, payload); end
  def inspect; end
  def reason; end
  def sid; end
  def to; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::TrustedComms::CpsList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CpsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CpsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::TrustedComms::CpsInstance < Twilio::REST::InstanceResource
  def context; end
  def cps_url; end
  def fetch; end
  def initialize(version, payload); end
  def inspect; end
  def phone_number; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Wireless::RatePlanList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, data_enabled: nil, data_limit: nil, data_metering: nil, messaging_enabled: nil, voice_enabled: nil, commands_enabled: nil, national_roaming_enabled: nil, international_roaming: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::RatePlanPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::RatePlanContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil, friendly_name: nil); end
end
class Twilio::REST::Preview::Wireless::RatePlanInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def data_enabled; end
  def data_limit; end
  def data_metering; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def international_roaming; end
  def messaging_enabled; end
  def national_roaming_enabled; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, friendly_name: nil); end
  def url; end
  def voice_enabled; end
end
class Twilio::REST::Preview::Wireless::CommandList < Twilio::REST::ListResource
  def create(command: nil, device: nil, sim: nil, callback_method: nil, callback_url: nil, command_mode: nil, include_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(device: nil, sim: nil, status: nil, direction: nil, limit: nil, page_size: nil); end
  def page(device: nil, sim: nil, status: nil, direction: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(device: nil, sim: nil, status: nil, direction: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::CommandPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::CommandContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::CommandInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def command; end
  def command_mode; end
  def context; end
  def date_created; end
  def date_updated; end
  def device_sid; end
  def direction; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Wireless::SimContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil, callback_method: nil, callback_url: nil, friendly_name: nil, rate_plan: nil, status: nil, commands_callback_method: nil, commands_callback_url: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil); end
  def usage; end
end
class Twilio::REST::Preview::Wireless::SimContext::UsageList < Twilio::REST::ListResource
  def initialize(version, sim_sid: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::SimContext::UsagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::SimContext::UsageContext < Twilio::REST::InstanceContext
  def fetch(end_: nil, start: nil); end
  def initialize(version, sim_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::SimContext::UsageInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def commands_costs; end
  def commands_usage; end
  def context; end
  def data_costs; end
  def data_usage; end
  def fetch(end_: nil, start: nil); end
  def initialize(version, payload, sim_sid: nil); end
  def inspect; end
  def period; end
  def sim_sid; end
  def sim_unique_name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Wireless::SimList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, limit: nil, page_size: nil); end
  def page(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::SimPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Wireless::SimInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def commands_callback_method; end
  def commands_callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def e_id; end
  def fetch; end
  def friendly_name; end
  def iccid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def rate_plan_sid; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, callback_method: nil, callback_url: nil, friendly_name: nil, rate_plan: nil, status: nil, commands_callback_method: nil, commands_callback_url: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil); end
  def url; end
  def usage; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Preview::HostedNumbers < Twilio::REST::Version
  def authorization_documents(sid = nil); end
  def hosted_number_orders(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentList < Twilio::REST::ListResource
  def create(hosted_number_order_sids: nil, address_sid: nil, email: nil, contact_title: nil, contact_phone_number: nil, cc_emails: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(email: nil, status: nil, limit: nil, page_size: nil); end
  def page(email: nil, status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(email: nil, status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext < Twilio::REST::InstanceContext
  def dependent_hosted_number_orders; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(hosted_number_order_sids: nil, address_sid: nil, email: nil, cc_emails: nil, status: nil, contact_title: nil, contact_phone_number: nil); end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentInstance < Twilio::REST::InstanceResource
  def address_sid; end
  def cc_emails; end
  def context; end
  def date_created; end
  def date_updated; end
  def dependent_hosted_number_orders; end
  def email; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def to_s; end
  def update(hosted_number_order_sids: nil, address_sid: nil, email: nil, cc_emails: nil, status: nil, contact_title: nil, contact_phone_number: nil); end
  def url; end
end
class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderList < Twilio::REST::ListResource
  def create(phone_number: nil, sms_capability: nil, account_sid: nil, friendly_name: nil, unique_name: nil, cc_emails: nil, sms_url: nil, sms_method: nil, sms_fallback_url: nil, sms_fallback_method: nil, status_callback_url: nil, status_callback_method: nil, sms_application_sid: nil, address_sid: nil, email: nil, verification_type: nil, verification_document_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, limit: nil, page_size: nil); end
  def page(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, email: nil, cc_emails: nil, status: nil, verification_code: nil, verification_type: nil, verification_document_sid: nil, extension: nil, call_delay: nil); end
end
class Twilio::REST::Preview::HostedNumbers::HostedNumberOrderInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_sid; end
  def call_delay; end
  def capabilities; end
  def cc_emails; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def email; end
  def extension; end
  def failure_reason; end
  def fetch; end
  def friendly_name; end
  def incoming_phone_number_sid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def phone_number; end
  def sid; end
  def signing_document_sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, email: nil, cc_emails: nil, status: nil, verification_code: nil, verification_type: nil, verification_document_sid: nil, extension: nil, call_delay: nil); end
  def url; end
  def verification_attempts; end
  def verification_call_sids; end
  def verification_code; end
  def verification_document_sid; end
  def verification_type; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, signing_document_sid: nil); end
  def list(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, limit: nil, page_size: nil); end
  def page(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, phone_number: nil, incoming_phone_number_sid: nil, friendly_name: nil, unique_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::HostedNumbers::AuthorizationDocumentContext::DependentHostedNumberOrderInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address_sid; end
  def call_delay; end
  def capabilities; end
  def cc_emails; end
  def date_created; end
  def date_updated; end
  def email; end
  def extension; end
  def failure_reason; end
  def friendly_name; end
  def incoming_phone_number_sid; end
  def initialize(version, payload, signing_document_sid: nil); end
  def inspect; end
  def phone_number; end
  def sid; end
  def signing_document_sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def verification_attempts; end
  def verification_call_sids; end
  def verification_code; end
  def verification_document_sid; end
  def verification_type; end
end
class Twilio::REST::Preview::DeployedDevices::FleetList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext < Twilio::REST::InstanceContext
  def certificates(sid = nil); end
  def delete; end
  def deployments(sid = nil); end
  def devices(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def keys(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, default_deployment_sid: nil); end
end
class Twilio::REST::Preview::DeployedDevices::FleetInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def certificates; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_deployment_sid; end
  def delete; end
  def deployments; end
  def devices; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def keys; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, default_deployment_sid: nil); end
  def url; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentList < Twilio::REST::ListResource
  def create(friendly_name: nil, sync_service_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, fleet_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, fleet_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, sync_service_sid: nil); end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeploymentInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def initialize(version, payload, fleet_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def sync_service_sid; end
  def to_s; end
  def update(friendly_name: nil, sync_service_sid: nil); end
  def url; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, identity: nil, deployment_sid: nil, enabled: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, fleet_sid: nil); end
  def list(deployment_sid: nil, limit: nil, page_size: nil); end
  def page(deployment_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(deployment_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DevicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, fleet_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, identity: nil, deployment_sid: nil, enabled: nil); end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::DeviceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_authenticated; end
  def date_created; end
  def date_updated; end
  def delete; end
  def deployment_sid; end
  def enabled; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def identity; end
  def initialize(version, payload, fleet_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, identity: nil, deployment_sid: nil, enabled: nil); end
  def url; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyList < Twilio::REST::ListResource
  def create(friendly_name: nil, device_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, fleet_sid: nil); end
  def list(device_sid: nil, limit: nil, page_size: nil); end
  def page(device_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(device_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, fleet_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, device_sid: nil); end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::KeyInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def device_sid; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def initialize(version, payload, fleet_sid: nil, sid: nil); end
  def inspect; end
  def secret; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, device_sid: nil); end
  def url; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateList < Twilio::REST::ListResource
  def create(certificate_data: nil, friendly_name: nil, device_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, fleet_sid: nil); end
  def list(device_sid: nil, limit: nil, page_size: nil); end
  def page(device_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(device_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificatePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, fleet_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, device_sid: nil); end
end
class Twilio::REST::Preview::DeployedDevices::FleetContext::CertificateInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def device_sid; end
  def fetch; end
  def fleet_sid; end
  def friendly_name; end
  def initialize(version, payload, fleet_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def thumbprint; end
  def to_s; end
  def update(friendly_name: nil, device_sid: nil); end
  def url; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnContext < Twilio::REST::InstanceContext
  def extensions(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnInstance < Twilio::REST::InstanceResource
  def configuration_schema; end
  def context; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def pricing_type; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnContext < Twilio::REST::InstanceContext
  def delete; end
  def extensions(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(configuration: nil, unique_name: nil); end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, installed_add_on_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, installed_add_on_sid, sid); end
  def inspect; end
  def to_s; end
  def update(enabled: nil); end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnContext::InstalledAddOnExtensionInstance < Twilio::REST::InstanceResource
  def context; end
  def enabled; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, installed_add_on_sid: nil, sid: nil); end
  def inspect; end
  def installed_add_on_sid; end
  def product_name; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(enabled: nil); end
  def url; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnList < Twilio::REST::ListResource
  def create(available_add_on_sid: nil, accept_terms_of_service: nil, configuration: nil, unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::InstalledAddOnInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def configuration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def description; end
  def extensions; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(configuration: nil, unique_name: nil); end
  def url; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, available_add_on_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, available_add_on_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Preview::Marketplace::AvailableAddOnContext::AvailableAddOnExtensionInstance < Twilio::REST::InstanceResource
  def available_add_on_sid; end
  def context; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, available_add_on_sid: nil, sid: nil); end
  def inspect; end
  def product_name; end
  def sid; end
  def to_s; end
  def unique_name; end
  def url; end
end
class Twilio::REST::Lookups::V1 < Twilio::REST::Version
  def initialize(domain); end
  def phone_numbers(phone_number = nil); end
  def to_s; end
end
class Twilio::REST::Lookups::V1::PhoneNumberList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Lookups::V1::PhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Lookups::V1::PhoneNumberContext < Twilio::REST::InstanceContext
  def fetch(country_code: nil, type: nil, add_ons: nil, add_ons_data: nil); end
  def initialize(version, phone_number); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Lookups::V1::PhoneNumberInstance < Twilio::REST::InstanceResource
  def add_ons; end
  def caller_name; end
  def carrier; end
  def context; end
  def country_code; end
  def fetch(country_code: nil, type: nil, add_ons: nil, add_ons_data: nil); end
  def initialize(version, payload, phone_number: nil); end
  def inspect; end
  def national_format; end
  def phone_number; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1 < Twilio::REST::Version
  def flows(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext < Twilio::REST::InstanceContext
  def delete; end
  def engagements(sid = nil); end
  def executions(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def engagements; end
  def executions; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
  def version; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionList < Twilio::REST::ListResource
  def create(to: nil, from: nil, parameters: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, flow_sid: nil); end
  def list(date_created_from: nil, date_created_to: nil, limit: nil, page_size: nil); end
  def page(date_created_from: nil, date_created_to: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(date_created_from: nil, date_created_to: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext < Twilio::REST::InstanceContext
  def delete; end
  def execution_context; end
  def fetch; end
  def initialize(version, flow_sid, sid); end
  def inspect; end
  def steps(sid = nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def contact_channel_address; end
  def contact_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def execution_context; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def steps; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementList < Twilio::REST::ListResource
  def create(to: nil, from: nil, parameters: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, flow_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext < Twilio::REST::InstanceContext
  def delete; end
  def engagement_context; end
  def fetch; end
  def initialize(version, flow_sid, sid); end
  def inspect; end
  def steps(sid = nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def contact_channel_address; end
  def contact_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def engagement_context; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def status; end
  def steps; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, engagement_sid, sid); end
  def inspect; end
  def step_context; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextList < Twilio::REST::ListResource
  def initialize(version, flow_sid: nil, engagement_sid: nil, step_sid: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, engagement_sid, step_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepContext::StepContextInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, engagement_sid: nil, step_sid: nil); end
  def inspect; end
  def step_sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, flow_sid: nil, engagement_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::StepInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, engagement_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def step_context; end
  def to_s; end
  def transitioned_from; end
  def transitioned_to; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextList < Twilio::REST::ListResource
  def initialize(version, flow_sid: nil, engagement_sid: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, engagement_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::EngagementContext::EngagementContextInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def engagement_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, engagement_sid: nil); end
  def inspect; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextList < Twilio::REST::ListResource
  def initialize(version, flow_sid: nil, execution_sid: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, execution_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionContextInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, execution_sid: nil); end
  def inspect; end
  def to_s; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, flow_sid: nil, execution_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, execution_sid, sid); end
  def inspect; end
  def step_context; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, execution_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def name; end
  def sid; end
  def step_context; end
  def to_s; end
  def transitioned_from; end
  def transitioned_to; end
  def url; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextList < Twilio::REST::ListResource
  def initialize(version, flow_sid: nil, execution_sid: nil, step_sid: nil); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, flow_sid, execution_sid, step_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Studio::V1::FlowContext::ExecutionContext::ExecutionStepContext::ExecutionStepContextInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def execution_sid; end
  def fetch; end
  def flow_sid; end
  def initialize(version, payload, flow_sid: nil, execution_sid: nil, step_sid: nil); end
  def inspect; end
  def step_sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Notify::V1 < Twilio::REST::Version
  def credentials(sid = nil); end
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Notify::V1::CredentialList < Twilio::REST::ListResource
  def create(type: nil, friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Notify::V1::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Notify::V1::CredentialContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
end
class Twilio::REST::Notify::V1::CredentialInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sandbox; end
  def sid; end
  def to_s; end
  def type; end
  def update(friendly_name: nil, certificate: nil, private_key: nil, sandbox: nil, api_key: nil, secret: nil); end
  def url; end
end
class Twilio::REST::Notify::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil, apn_credential_sid: nil, gcm_credential_sid: nil, messaging_service_sid: nil, facebook_messenger_page_id: nil, default_apn_notification_protocol_version: nil, default_gcm_notification_protocol_version: nil, fcm_credential_sid: nil, default_fcm_notification_protocol_version: nil, log_enabled: nil, alexa_skill_id: nil, default_alexa_notification_protocol_version: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(friendly_name: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext < Twilio::REST::InstanceContext
  def bindings(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def notifications; end
  def to_s; end
  def update(friendly_name: nil, apn_credential_sid: nil, gcm_credential_sid: nil, messaging_service_sid: nil, facebook_messenger_page_id: nil, default_apn_notification_protocol_version: nil, default_gcm_notification_protocol_version: nil, fcm_credential_sid: nil, default_fcm_notification_protocol_version: nil, log_enabled: nil, alexa_skill_id: nil, default_alexa_notification_protocol_version: nil); end
end
class Twilio::REST::Notify::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def alexa_skill_id; end
  def apn_credential_sid; end
  def bindings; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_alexa_notification_protocol_version; end
  def default_apn_notification_protocol_version; end
  def default_fcm_notification_protocol_version; end
  def default_gcm_notification_protocol_version; end
  def delete; end
  def facebook_messenger_page_id; end
  def fcm_credential_sid; end
  def fetch; end
  def friendly_name; end
  def gcm_credential_sid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def log_enabled; end
  def messaging_service_sid; end
  def notifications; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil, apn_credential_sid: nil, gcm_credential_sid: nil, messaging_service_sid: nil, facebook_messenger_page_id: nil, default_apn_notification_protocol_version: nil, default_gcm_notification_protocol_version: nil, fcm_credential_sid: nil, default_fcm_notification_protocol_version: nil, log_enabled: nil, alexa_skill_id: nil, default_alexa_notification_protocol_version: nil); end
  def url; end
end
class Twilio::REST::Notify::V1::ServiceContext::NotificationList < Twilio::REST::ListResource
  def create(body: nil, priority: nil, ttl: nil, title: nil, sound: nil, action: nil, data: nil, apn: nil, gcm: nil, sms: nil, facebook_messenger: nil, fcm: nil, segment: nil, alexa: nil, to_binding: nil, identity: nil, tag: nil); end
  def initialize(version, service_sid: nil); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext::NotificationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext::NotificationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def action; end
  def alexa; end
  def apn; end
  def body; end
  def data; end
  def date_created; end
  def facebook_messenger; end
  def fcm; end
  def gcm; end
  def identities; end
  def initialize(version, payload, service_sid: nil); end
  def inspect; end
  def priority; end
  def segments; end
  def service_sid; end
  def sid; end
  def sms; end
  def sound; end
  def tags; end
  def title; end
  def to_s; end
  def ttl; end
end
class Twilio::REST::Notify::V1::ServiceContext::BindingList < Twilio::REST::ListResource
  def create(identity: nil, binding_type: nil, address: nil, tag: nil, notification_protocol_version: nil, credential_sid: nil, endpoint: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(start_date: nil, end_date: nil, identity: nil, tag: nil, limit: nil, page_size: nil); end
  def page(start_date: nil, end_date: nil, identity: nil, tag: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(start_date: nil, end_date: nil, identity: nil, tag: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext::BindingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext::BindingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Notify::V1::ServiceContext::BindingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def address; end
  def binding_type; end
  def context; end
  def credential_sid; end
  def date_created; end
  def date_updated; end
  def delete; end
  def endpoint; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def notification_protocol_version; end
  def service_sid; end
  def sid; end
  def tags; end
  def to_s; end
  def url; end
end
class Twilio::REST::Insights::V1 < Twilio::REST::Version
  def initialize(domain); end
  def summary(call_sid = nil); end
  def to_s; end
end
class Twilio::REST::Insights::V1::CallSummaryList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Insights::V1::CallSummaryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Insights::V1::CallSummaryContext < Twilio::REST::InstanceContext
  def fetch(processing_state: nil); end
  def initialize(version, call_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Insights::V1::CallSummaryInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def attributes; end
  def call_sid; end
  def call_state; end
  def call_type; end
  def carrier_edge; end
  def client_edge; end
  def connect_duration; end
  def context; end
  def duration; end
  def end_time; end
  def fetch(processing_state: nil); end
  def from; end
  def initialize(version, payload, call_sid: nil); end
  def inspect; end
  def processing_state; end
  def properties; end
  def sdk_edge; end
  def sip_edge; end
  def start_time; end
  def tags; end
  def to; end
  def to_s; end
  def url; end
end
class Twilio::REST::Serverless::V1 < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, include_credentials: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext < Twilio::REST::InstanceContext
  def assets(sid = nil); end
  def builds(sid = nil); end
  def delete; end
  def environments(sid = nil); end
  def fetch; end
  def functions(sid = nil); end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(include_credentials: nil, friendly_name: nil); end
end
class Twilio::REST::Serverless::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assets; end
  def builds; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def environments; end
  def fetch; end
  def friendly_name; end
  def functions; end
  def include_credentials; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(include_credentials: nil, friendly_name: nil); end
  def url; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetContext < Twilio::REST::InstanceContext
  def asset_versions(sid = nil); end
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, asset_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, asset_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetContext::AssetVersionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def asset_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, asset_sid: nil, sid: nil); end
  def inspect; end
  def path; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def visibility; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def function_versions(sid = nil); end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def function_versions; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentList < Twilio::REST::ListResource
  def create(unique_name: nil, domain_suffix: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext < Twilio::REST::InstanceContext
  def delete; end
  def deployments(sid = nil); end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def logs(sid = nil); end
  def to_s; end
  def variables(sid = nil); end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def build_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def deployments; end
  def domain_name; end
  def domain_suffix; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def logs; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def url; end
  def variables; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentList < Twilio::REST::ListResource
  def create(build_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, environment_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, environment_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::DeploymentInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def build_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def environment_sid; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, environment_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, environment_sid: nil); end
  def list(function_sid: nil, limit: nil, page_size: nil); end
  def page(function_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(function_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, environment_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::LogInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def deployment_sid; end
  def environment_sid; end
  def fetch; end
  def function_sid; end
  def initialize(version, payload, service_sid: nil, environment_sid: nil, sid: nil); end
  def inspect; end
  def level; end
  def message; end
  def request_sid; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableList < Twilio::REST::ListResource
  def create(key: nil, value: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, environment_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariablePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, environment_sid, sid); end
  def inspect; end
  def to_s; end
  def update(key: nil, value: nil); end
end
class Twilio::REST::Serverless::V1::ServiceContext::EnvironmentContext::VariableInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def environment_sid; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, environment_sid: nil, sid: nil); end
  def inspect; end
  def key; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(key: nil, value: nil); end
  def url; end
  def value; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, function_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, function_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::FunctionContext::FunctionVersionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def fetch; end
  def function_sid; end
  def initialize(version, payload, service_sid: nil, function_sid: nil, sid: nil); end
  def inspect; end
  def path; end
  def service_sid; end
  def sid; end
  def to_s; end
  def url; end
  def visibility; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetList < Twilio::REST::ListResource
  def create(friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::AssetInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def asset_versions; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
end
class Twilio::REST::Serverless::V1::ServiceContext::BuildList < Twilio::REST::ListResource
  def create(asset_versions: nil, function_versions: nil, dependencies: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::BuildPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::BuildContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Serverless::V1::ServiceContext::BuildInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def asset_versions; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def dependencies; end
  def fetch; end
  def function_versions; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def url; end
end
class Twilio::REST::Taskrouter::V1 < Twilio::REST::Version
  def initialize(domain); end
  def to_s; end
  def workspaces(sid = nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceList < Twilio::REST::ListResource
  def create(friendly_name: nil, event_callback_url: nil, events_filter: nil, multi_task_enabled: nil, template: nil, prioritize_queue_order: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(friendly_name: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspacePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext < Twilio::REST::InstanceContext
  def activities(sid = nil); end
  def cumulative_statistics; end
  def delete; end
  def events(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def task_channels(sid = nil); end
  def task_queues(sid = nil); end
  def tasks(sid = nil); end
  def to_s; end
  def update(default_activity_sid: nil, event_callback_url: nil, events_filter: nil, friendly_name: nil, multi_task_enabled: nil, timeout_activity_sid: nil, prioritize_queue_order: nil); end
  def workers(sid = nil); end
  def workflows(sid = nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activities; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def default_activity_name; end
  def default_activity_sid; end
  def delete; end
  def event_callback_url; end
  def events; end
  def events_filter; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def multi_task_enabled; end
  def prioritize_queue_order; end
  def real_time_statistics; end
  def sid; end
  def statistics; end
  def task_channels; end
  def task_queues; end
  def tasks; end
  def timeout_activity_name; end
  def timeout_activity_sid; end
  def to_s; end
  def update(default_activity_sid: nil, event_callback_url: nil, events_filter: nil, friendly_name: nil, multi_task_enabled: nil, timeout_activity_sid: nil, prioritize_queue_order: nil); end
  def url; end
  def workers; end
  def workflows; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext < Twilio::REST::InstanceContext
  def cumulative_statistics; end
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def to_s; end
  def update(friendly_name: nil, assignment_callback_url: nil, fallback_assignment_callback_url: nil, configuration: nil, task_reservation_timeout: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, workflow_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsContext < Twilio::REST::InstanceContext
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid, workflow_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil, workflow_sid: nil); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workflow_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, workflow_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid, workflow_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowCumulativeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil, workflow_sid: nil); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_deleted; end
  def tasks_entered; end
  def tasks_moved; end
  def tasks_timed_out_in_workflow; end
  def to_s; end
  def url; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workflow_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, workflow_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(task_channel: nil); end
  def initialize(version, workspace_sid, workflow_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowContext::WorkflowRealTimeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def fetch(task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil, workflow_sid: nil); end
  def inspect; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_tasks; end
  def url; end
  def workflow_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskList < Twilio::REST::ListResource
  def create(timeout: nil, priority: nil, task_channel: nil, workflow_sid: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(priority: nil, assignment_status: nil, workflow_sid: nil, workflow_name: nil, task_queue_sid: nil, task_queue_name: nil, evaluate_task_attributes: nil, ordering: nil, has_addons: nil, limit: nil, page_size: nil); end
  def page(priority: nil, assignment_status: nil, workflow_sid: nil, workflow_name: nil, task_queue_sid: nil, task_queue_name: nil, evaluate_task_attributes: nil, ordering: nil, has_addons: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(priority: nil, assignment_status: nil, workflow_sid: nil, workflow_name: nil, task_queue_sid: nil, task_queue_name: nil, evaluate_task_attributes: nil, ordering: nil, has_addons: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def reservations(sid = nil); end
  def to_s; end
  def update(attributes: nil, assignment_status: nil, reason: nil, priority: nil, task_channel: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def addons; end
  def age; end
  def assignment_status; end
  def attributes; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def priority; end
  def reason; end
  def reservations; end
  def sid; end
  def task_channel_sid; end
  def task_channel_unique_name; end
  def task_queue_friendly_name; end
  def task_queue_sid; end
  def timeout; end
  def to_s; end
  def update(attributes: nil, assignment_status: nil, reason: nil, priority: nil, task_channel: nil); end
  def url; end
  def workflow_friendly_name; end
  def workflow_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowList < Twilio::REST::ListResource
  def create(friendly_name: nil, configuration: nil, assignment_callback_url: nil, fallback_assignment_callback_url: nil, task_reservation_timeout: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(friendly_name: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkflowInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assignment_callback_url; end
  def configuration; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def delete; end
  def document_content_type; end
  def fallback_assignment_callback_url; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def real_time_statistics; end
  def sid; end
  def statistics; end
  def task_reservation_timeout; end
  def to_s; end
  def update(friendly_name: nil, assignment_callback_url: nil, fallback_assignment_callback_url: nil, configuration: nil, task_reservation_timeout: nil); end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelList < Twilio::REST::ListResource
  def create(friendly_name: nil, unique_name: nil, channel_optimized_routing: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, channel_optimized_routing: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def channel_optimized_routing; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, channel_optimized_routing: nil); end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(task_channel: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceRealTimeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_tasks; end
  def total_workers; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil, task_sid: nil); end
  def list(reservation_status: nil, limit: nil, page_size: nil); end
  def page(reservation_status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(reservation_status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, workspace_sid, task_sid, sid); end
  def inspect; end
  def to_s; end
  def update(reservation_status: nil, worker_activity_sid: nil, instruction: nil, dequeue_post_work_activity_sid: nil, dequeue_from: nil, dequeue_record: nil, dequeue_timeout: nil, dequeue_to: nil, dequeue_status_callback_url: nil, call_from: nil, call_record: nil, call_timeout: nil, call_to: nil, call_url: nil, call_status_callback_url: nil, call_accept: nil, redirect_call_sid: nil, redirect_accept: nil, redirect_url: nil, to: nil, from: nil, status_callback: nil, status_callback_method: nil, status_callback_event: nil, timeout: nil, record: nil, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, early_media: nil, max_participants: nil, conference_status_callback: nil, conference_status_callback_method: nil, conference_status_callback_event: nil, conference_record: nil, conference_trim: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, conference_recording_status_callback: nil, conference_recording_status_callback_method: nil, region: nil, sip_auth_username: nil, sip_auth_password: nil, dequeue_status_callback_event: nil, post_work_activity_sid: nil, supervisor_mode: nil, supervisor: nil, end_conference_on_customer_exit: nil, beep_on_customer_entrance: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskContext::ReservationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, workspace_sid: nil, task_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def reservation_status; end
  def sid; end
  def task_sid; end
  def to_s; end
  def update(reservation_status: nil, worker_activity_sid: nil, instruction: nil, dequeue_post_work_activity_sid: nil, dequeue_from: nil, dequeue_record: nil, dequeue_timeout: nil, dequeue_to: nil, dequeue_status_callback_url: nil, call_from: nil, call_record: nil, call_timeout: nil, call_to: nil, call_url: nil, call_status_callback_url: nil, call_accept: nil, redirect_call_sid: nil, redirect_accept: nil, redirect_url: nil, to: nil, from: nil, status_callback: nil, status_callback_method: nil, status_callback_event: nil, timeout: nil, record: nil, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, early_media: nil, max_participants: nil, conference_status_callback: nil, conference_status_callback_method: nil, conference_status_callback_event: nil, conference_record: nil, conference_trim: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, conference_recording_status_callback: nil, conference_recording_status_callback_method: nil, region: nil, sip_auth_username: nil, sip_auth_password: nil, dequeue_status_callback_event: nil, post_work_activity_sid: nil, supervisor_mode: nil, supervisor: nil, end_conference_on_customer_exit: nil, beep_on_customer_entrance: nil); end
  def url; end
  def worker_name; end
  def worker_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext < Twilio::REST::InstanceContext
  def cumulative_statistics; end
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def real_time_statistics; end
  def reservations(sid = nil); end
  def statistics; end
  def to_s; end
  def update(activity_sid: nil, attributes: nil, friendly_name: nil, reject_pending_reservations: nil); end
  def worker_channels(sid = nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(task_channel: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersRealTimeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def to_s; end
  def total_workers; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, worker_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsContext < Twilio::REST::InstanceContext
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil); end
  def initialize(version, workspace_sid, worker_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil, worker_sid: nil); end
  def inspect; end
  def to_s; end
  def url; end
  def worker_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList < Twilio::REST::ListResource
  def create(friendly_name: nil, activity_sid: nil, attributes: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(activity_name: nil, activity_sid: nil, available: nil, friendly_name: nil, target_workers_expression: nil, task_queue_name: nil, task_queue_sid: nil, limit: nil, page_size: nil); end
  def page(activity_name: nil, activity_sid: nil, available: nil, friendly_name: nil, target_workers_expression: nil, task_queue_name: nil, task_queue_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def statistics; end
  def stream(activity_name: nil, activity_sid: nil, available: nil, friendly_name: nil, target_workers_expression: nil, task_queue_name: nil, task_queue_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsContext < Twilio::REST::InstanceContext
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_queue_sid: nil, task_queue_name: nil, friendly_name: nil, task_channel: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerList::WorkersStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_queue_sid: nil, task_queue_name: nil, friendly_name: nil, task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkersCumulativeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activity_durations; end
  def context; end
  def end_time; end
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def start_time; end
  def to_s; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil, worker_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, workspace_sid, worker_sid, sid); end
  def inspect; end
  def to_s; end
  def update(capacity: nil, available: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::WorkerChannelInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assigned_tasks; end
  def available; end
  def available_capacity_percentage; end
  def configured_capacity; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, workspace_sid: nil, worker_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def task_channel_sid; end
  def task_channel_unique_name; end
  def to_s; end
  def update(capacity: nil, available: nil); end
  def url; end
  def worker_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil, worker_sid: nil); end
  def list(reservation_status: nil, limit: nil, page_size: nil); end
  def page(reservation_status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(reservation_status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, workspace_sid, worker_sid, sid); end
  def inspect; end
  def to_s; end
  def update(reservation_status: nil, worker_activity_sid: nil, instruction: nil, dequeue_post_work_activity_sid: nil, dequeue_from: nil, dequeue_record: nil, dequeue_timeout: nil, dequeue_to: nil, dequeue_status_callback_url: nil, call_from: nil, call_record: nil, call_timeout: nil, call_to: nil, call_url: nil, call_status_callback_url: nil, call_accept: nil, redirect_call_sid: nil, redirect_accept: nil, redirect_url: nil, to: nil, from: nil, status_callback: nil, status_callback_method: nil, status_callback_event: nil, timeout: nil, record: nil, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, early_media: nil, max_participants: nil, conference_status_callback: nil, conference_status_callback_method: nil, conference_status_callback_event: nil, conference_record: nil, conference_trim: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, conference_recording_status_callback: nil, conference_recording_status_callback_method: nil, region: nil, sip_auth_username: nil, sip_auth_password: nil, dequeue_status_callback_event: nil, post_work_activity_sid: nil, end_conference_on_customer_exit: nil, beep_on_customer_entrance: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerContext::ReservationInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def initialize(version, payload, workspace_sid: nil, worker_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def reservation_status; end
  def sid; end
  def task_sid; end
  def to_s; end
  def update(reservation_status: nil, worker_activity_sid: nil, instruction: nil, dequeue_post_work_activity_sid: nil, dequeue_from: nil, dequeue_record: nil, dequeue_timeout: nil, dequeue_to: nil, dequeue_status_callback_url: nil, call_from: nil, call_record: nil, call_timeout: nil, call_to: nil, call_url: nil, call_status_callback_url: nil, call_accept: nil, redirect_call_sid: nil, redirect_accept: nil, redirect_url: nil, to: nil, from: nil, status_callback: nil, status_callback_method: nil, status_callback_event: nil, timeout: nil, record: nil, muted: nil, beep: nil, start_conference_on_enter: nil, end_conference_on_exit: nil, wait_url: nil, wait_method: nil, early_media: nil, max_participants: nil, conference_status_callback: nil, conference_status_callback_method: nil, conference_status_callback_event: nil, conference_record: nil, conference_trim: nil, recording_channels: nil, recording_status_callback: nil, recording_status_callback_method: nil, conference_recording_status_callback: nil, conference_recording_status_callback_method: nil, region: nil, sip_auth_username: nil, sip_auth_password: nil, dequeue_status_callback_event: nil, post_work_activity_sid: nil, end_conference_on_customer_exit: nil, beep_on_customer_entrance: nil); end
  def url; end
  def worker_name; end
  def worker_sid; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkerInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activity_name; end
  def activity_sid; end
  def attributes; end
  def available; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_status_changed; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def real_time_statistics; end
  def reservations; end
  def sid; end
  def statistics; end
  def to_s; end
  def update(activity_sid: nil, attributes: nil, friendly_name: nil, reject_pending_reservations: nil); end
  def url; end
  def worker_channels; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsContext < Twilio::REST::InstanceContext
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(minutes: nil, start_date: nil, end_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def realtime; end
  def to_s; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(end_date: nil, event_type: nil, minutes: nil, reservation_sid: nil, start_date: nil, task_queue_sid: nil, task_sid: nil, worker_sid: nil, workflow_sid: nil, task_channel: nil, sid: nil, limit: nil, page_size: nil); end
  def page(end_date: nil, event_type: nil, minutes: nil, reservation_sid: nil, start_date: nil, task_queue_sid: nil, task_sid: nil, worker_sid: nil, workflow_sid: nil, task_channel: nil, sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(end_date: nil, event_type: nil, minutes: nil, reservation_sid: nil, start_date: nil, task_queue_sid: nil, task_sid: nil, worker_sid: nil, workflow_sid: nil, task_channel: nil, sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::EventInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def actor_sid; end
  def actor_type; end
  def actor_url; end
  def context; end
  def description; end
  def event_data; end
  def event_date; end
  def event_date_ms; end
  def event_type; end
  def fetch; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def resource_sid; end
  def resource_type; end
  def resource_url; end
  def sid; end
  def source; end
  def source_ip_address; end
  def to_s; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList < Twilio::REST::ListResource
  def create(friendly_name: nil, target_workers: nil, max_reserved_workers: nil, task_order: nil, reservation_activity_sid: nil, assignment_activity_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(friendly_name: nil, evaluate_worker_attributes: nil, worker_sid: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, evaluate_worker_attributes: nil, worker_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def statistics; end
  def stream(friendly_name: nil, evaluate_worker_attributes: nil, worker_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(end_date: nil, friendly_name: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil, limit: nil, page_size: nil); end
  def page(end_date: nil, friendly_name: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(end_date: nil, friendly_name: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueList::TaskQueuesStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def cumulative; end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def realtime; end
  def task_queue_sid; end
  def to_s; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext < Twilio::REST::InstanceContext
  def cumulative_statistics; end
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def real_time_statistics; end
  def statistics; end
  def to_s; end
  def update(friendly_name: nil, target_workers: nil, reservation_activity_sid: nil, assignment_activity_sid: nil, max_reserved_workers: nil, task_order: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, task_queue_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid, task_queue_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueCumulativeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil, task_queue_sid: nil); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def task_queue_sid; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_deleted; end
  def tasks_entered; end
  def tasks_moved; end
  def to_s; end
  def url; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, task_queue_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(task_channel: nil); end
  def initialize(version, workspace_sid, task_queue_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueRealTimeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def activity_statistics; end
  def context; end
  def fetch(task_channel: nil); end
  def initialize(version, payload, workspace_sid: nil, task_queue_sid: nil); end
  def inspect; end
  def longest_task_waiting_age; end
  def longest_task_waiting_sid; end
  def task_queue_sid; end
  def tasks_by_priority; end
  def tasks_by_status; end
  def to_s; end
  def total_available_workers; end
  def total_eligible_workers; end
  def total_tasks; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil, task_queue_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsContext < Twilio::REST::InstanceContext
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid, task_queue_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueContext::TaskQueueStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def cumulative; end
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil, task_queue_sid: nil); end
  def inspect; end
  def realtime; end
  def task_queue_sid; end
  def to_s; end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueuePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::TaskQueueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assignment_activity_name; end
  def assignment_activity_sid; end
  def context; end
  def cumulative_statistics; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def max_reserved_workers; end
  def real_time_statistics; end
  def reservation_activity_name; end
  def reservation_activity_sid; end
  def sid; end
  def statistics; end
  def target_workers; end
  def task_order; end
  def to_s; end
  def update(friendly_name: nil, target_workers: nil, reservation_activity_sid: nil, assignment_activity_sid: nil, max_reserved_workers: nil, task_order: nil); end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsList < Twilio::REST::ListResource
  def initialize(version, workspace_sid: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsContext < Twilio::REST::InstanceContext
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, workspace_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::WorkspaceCumulativeStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def avg_task_acceptance_time; end
  def context; end
  def end_time; end
  def fetch(end_date: nil, minutes: nil, start_date: nil, task_channel: nil, split_by_wait_time: nil); end
  def initialize(version, payload, workspace_sid: nil); end
  def inspect; end
  def reservations_accepted; end
  def reservations_canceled; end
  def reservations_created; end
  def reservations_rejected; end
  def reservations_rescinded; end
  def reservations_timed_out; end
  def split_by_wait_time; end
  def start_time; end
  def tasks_canceled; end
  def tasks_completed; end
  def tasks_created; end
  def tasks_deleted; end
  def tasks_moved; end
  def tasks_timed_out_in_workflow; end
  def to_s; end
  def url; end
  def wait_duration_until_accepted; end
  def wait_duration_until_canceled; end
  def workspace_sid; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityList < Twilio::REST::ListResource
  def create(friendly_name: nil, available: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, workspace_sid: nil); end
  def list(friendly_name: nil, available: nil, limit: nil, page_size: nil); end
  def page(friendly_name: nil, available: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(friendly_name: nil, available: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, workspace_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Taskrouter::V1::WorkspaceContext::ActivityInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def available; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, workspace_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
  def workspace_sid; end
end
class Twilio::REST::Video::V1 < Twilio::REST::Version
  def composition_hooks(sid = nil); end
  def composition_settings; end
  def compositions(sid = nil); end
  def initialize(domain); end
  def recording_settings; end
  def recordings(sid = nil); end
  def rooms(sid = nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingSettingsList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingSettingsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingSettingsContext < Twilio::REST::InstanceContext
  def create(friendly_name: nil, aws_credentials_sid: nil, encryption_key_sid: nil, aws_s3_url: nil, aws_storage_enabled: nil, encryption_enabled: nil); end
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingSettingsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def aws_credentials_sid; end
  def aws_s3_url; end
  def aws_storage_enabled; end
  def context; end
  def create(friendly_name: nil, aws_credentials_sid: nil, encryption_key_sid: nil, aws_s3_url: nil, aws_storage_enabled: nil, encryption_enabled: nil); end
  def encryption_enabled; end
  def encryption_key_sid; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
  def url; end
end
class Twilio::REST::Video::V1::CompositionSettingsList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionSettingsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionSettingsContext < Twilio::REST::InstanceContext
  def create(friendly_name: nil, aws_credentials_sid: nil, encryption_key_sid: nil, aws_s3_url: nil, aws_storage_enabled: nil, encryption_enabled: nil); end
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionSettingsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def aws_credentials_sid; end
  def aws_s3_url; end
  def aws_storage_enabled; end
  def context; end
  def create(friendly_name: nil, aws_credentials_sid: nil, encryption_key_sid: nil, aws_s3_url: nil, aws_storage_enabled: nil, encryption_enabled: nil); end
  def encryption_enabled; end
  def encryption_key_sid; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
  def url; end
end
class Twilio::REST::Video::V1::CompositionList < Twilio::REST::ListResource
  def create(room_sid: nil, video_layout: nil, audio_sources: nil, audio_sources_excluded: nil, resolution: nil, format: nil, status_callback: nil, status_callback_method: nil, trim: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, date_created_after: nil, date_created_before: nil, room_sid: nil, limit: nil, page_size: nil); end
  def page(status: nil, date_created_after: nil, date_created_before: nil, room_sid: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, date_created_after: nil, date_created_before: nil, room_sid: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def audio_sources; end
  def audio_sources_excluded; end
  def bitrate; end
  def context; end
  def date_completed; end
  def date_created; end
  def date_deleted; end
  def delete; end
  def duration; end
  def fetch; end
  def format; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def resolution; end
  def room_sid; end
  def sid; end
  def size; end
  def status; end
  def to_s; end
  def trim; end
  def url; end
  def video_layout; end
end
class Twilio::REST::Video::V1::RoomContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def participants(sid = nil); end
  def recordings(sid = nil); end
  def to_s; end
  def update(status: nil); end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, room_sid: nil); end
  def list(status: nil, identity: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def page(status: nil, identity: nil, date_created_after: nil, date_created_before: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, identity: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, room_sid, sid); end
  def inspect; end
  def published_tracks(sid = nil); end
  def subscribe_rules; end
  def subscribed_tracks(sid = nil); end
  def to_s; end
  def update(status: nil); end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def duration; end
  def end_time; end
  def fetch; end
  def identity; end
  def initialize(version, payload, room_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def published_tracks; end
  def room_sid; end
  def sid; end
  def start_time; end
  def status; end
  def subscribe_rules; end
  def subscribed_tracks; end
  def to_s; end
  def update(status: nil); end
  def url; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, room_sid: nil, participant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, room_sid, participant_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribedTrackInstance < Twilio::REST::InstanceResource
  def context; end
  def date_created; end
  def date_updated; end
  def enabled; end
  def fetch; end
  def initialize(version, payload, room_sid: nil, participant_sid: nil, sid: nil); end
  def inspect; end
  def kind; end
  def name; end
  def participant_sid; end
  def publisher_sid; end
  def room_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, room_sid: nil, participant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, room_sid, participant_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::PublishedTrackInstance < Twilio::REST::InstanceResource
  def context; end
  def date_created; end
  def date_updated; end
  def enabled; end
  def fetch; end
  def initialize(version, payload, room_sid: nil, participant_sid: nil, sid: nil); end
  def inspect; end
  def kind; end
  def name; end
  def participant_sid; end
  def room_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesList < Twilio::REST::ListResource
  def fetch; end
  def initialize(version, room_sid: nil, participant_sid: nil); end
  def to_s; end
  def update(rules: nil); end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::ParticipantContext::SubscribeRulesInstance < Twilio::REST::InstanceResource
  def date_created; end
  def date_updated; end
  def initialize(version, payload, room_sid: nil, participant_sid: nil); end
  def inspect; end
  def participant_sid; end
  def room_sid; end
  def rules; end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::RoomRecordingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, room_sid: nil); end
  def list(status: nil, source_sid: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def page(status: nil, source_sid: nil, date_created_after: nil, date_created_before: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, source_sid: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::RoomRecordingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::RoomRecordingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, room_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomContext::RoomRecordingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def codec; end
  def container_format; end
  def context; end
  def date_created; end
  def delete; end
  def duration; end
  def fetch; end
  def grouping_sids; end
  def initialize(version, payload, room_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def offset; end
  def room_sid; end
  def sid; end
  def size; end
  def source_sid; end
  def status; end
  def to_s; end
  def track_name; end
  def type; end
  def url; end
end
class Twilio::REST::Video::V1::RoomList < Twilio::REST::ListResource
  def create(enable_turn: nil, type: nil, unique_name: nil, status_callback: nil, status_callback_method: nil, max_participants: nil, record_participants_on_connect: nil, video_codecs: nil, media_region: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, unique_name: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def page(status: nil, unique_name: nil, date_created_after: nil, date_created_before: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, unique_name: nil, date_created_after: nil, date_created_before: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RoomInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def duration; end
  def enable_turn; end
  def end_time; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def max_participants; end
  def media_region; end
  def participants; end
  def record_participants_on_connect; end
  def recordings; end
  def sid; end
  def status; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def type; end
  def unique_name; end
  def update(status: nil); end
  def url; end
  def video_codecs; end
end
class Twilio::REST::Video::V1::CompositionHookList < Twilio::REST::ListResource
  def create(friendly_name: nil, enabled: nil, video_layout: nil, audio_sources: nil, audio_sources_excluded: nil, resolution: nil, format: nil, status_callback: nil, status_callback_method: nil, trim: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(enabled: nil, date_created_after: nil, date_created_before: nil, friendly_name: nil, limit: nil, page_size: nil); end
  def page(enabled: nil, date_created_after: nil, date_created_before: nil, friendly_name: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(enabled: nil, date_created_after: nil, date_created_before: nil, friendly_name: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionHookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::CompositionHookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, enabled: nil, video_layout: nil, audio_sources: nil, audio_sources_excluded: nil, trim: nil, format: nil, resolution: nil, status_callback: nil, status_callback_method: nil); end
end
class Twilio::REST::Video::V1::CompositionHookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def audio_sources; end
  def audio_sources_excluded; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def enabled; end
  def fetch; end
  def format; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def resolution; end
  def sid; end
  def status_callback; end
  def status_callback_method; end
  def to_s; end
  def trim; end
  def update(friendly_name: nil, enabled: nil, video_layout: nil, audio_sources: nil, audio_sources_excluded: nil, trim: nil, format: nil, resolution: nil, status_callback: nil, status_callback_method: nil); end
  def url; end
  def video_layout; end
end
class Twilio::REST::Video::V1::RecordingList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, source_sid: nil, grouping_sid: nil, date_created_after: nil, date_created_before: nil, media_type: nil, limit: nil, page_size: nil); end
  def page(status: nil, source_sid: nil, grouping_sid: nil, date_created_after: nil, date_created_before: nil, media_type: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, source_sid: nil, grouping_sid: nil, date_created_after: nil, date_created_before: nil, media_type: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Video::V1::RecordingInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def codec; end
  def container_format; end
  def context; end
  def date_created; end
  def delete; end
  def duration; end
  def fetch; end
  def grouping_sids; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def offset; end
  def sid; end
  def size; end
  def source_sid; end
  def status; end
  def to_s; end
  def track_name; end
  def type; end
  def url; end
end
class Twilio::REST::Pricing::V1 < Twilio::REST::Version
  def initialize(domain); end
  def messaging; end
  def phone_numbers; end
  def to_s; end
  def voice; end
end
class Twilio::REST::Pricing::V1::MessagingList < Twilio::REST::ListResource
  def countries(iso_country = nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::MessagingList::CountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::MessagingList::CountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::MessagingList::CountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, iso_country); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V1::MessagingList::CountryInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def fetch; end
  def inbound_sms_prices; end
  def initialize(version, payload, iso_country: nil); end
  def inspect; end
  def iso_country; end
  def outbound_sms_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::MessagingPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::MessagingInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::PhoneNumberList < Twilio::REST::ListResource
  def countries(iso_country = nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::PhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::PhoneNumberInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::VoiceList < Twilio::REST::ListResource
  def countries(iso_country = nil); end
  def initialize(version); end
  def numbers(number = nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::VoiceList::NumberList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::NumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::NumberContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, number); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::NumberInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def fetch; end
  def inbound_call_price; end
  def initialize(version, payload, number: nil); end
  def inspect; end
  def iso_country; end
  def number; end
  def outbound_call_price; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::VoiceList::CountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::CountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::CountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, iso_country); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V1::VoiceList::CountryInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def fetch; end
  def inbound_call_prices; end
  def initialize(version, payload, iso_country: nil); end
  def inspect; end
  def iso_country; end
  def outbound_prefix_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V1::PhoneNumberList::CountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::PhoneNumberList::CountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V1::PhoneNumberList::CountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, iso_country); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V1::PhoneNumberList::CountryInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def fetch; end
  def initialize(version, payload, iso_country: nil); end
  def inspect; end
  def iso_country; end
  def phone_number_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V2 < Twilio::REST::Version
  def initialize(domain); end
  def to_s; end
  def voice; end
end
class Twilio::REST::Pricing::V2::VoiceList < Twilio::REST::ListResource
  def countries(iso_country = nil); end
  def initialize(version); end
  def numbers(destination_number = nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def links; end
  def name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V2::VoiceList::NumberList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::NumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::NumberContext < Twilio::REST::InstanceContext
  def fetch(origination_number: nil); end
  def initialize(version, destination_number); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::NumberInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def destination_number; end
  def fetch(origination_number: nil); end
  def inbound_call_price; end
  def initialize(version, payload, destination_number: nil); end
  def inspect; end
  def iso_country; end
  def origination_number; end
  def outbound_call_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Pricing::V2::VoiceList::CountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::CountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::CountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, iso_country); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Pricing::V2::VoiceList::CountryInstance < Twilio::REST::InstanceResource
  def context; end
  def country; end
  def fetch; end
  def inbound_call_prices; end
  def initialize(version, payload, iso_country: nil); end
  def inspect; end
  def iso_country; end
  def outbound_prefix_prices; end
  def price_unit; end
  def to_s; end
  def url; end
end
class Twilio::REST::Sync::V1 < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceList < Twilio::REST::ListResource
  def create(friendly_name: nil, webhook_url: nil, reachability_webhooks_enabled: nil, acl_enabled: nil, reachability_debouncing_enabled: nil, reachability_debouncing_window: nil, webhooks_from_rest_enabled: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext < Twilio::REST::InstanceContext
  def delete; end
  def documents(sid = nil); end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def sync_lists(sid = nil); end
  def sync_maps(sid = nil); end
  def sync_streams(sid = nil); end
  def to_s; end
  def update(webhook_url: nil, friendly_name: nil, reachability_webhooks_enabled: nil, acl_enabled: nil, reachability_debouncing_enabled: nil, reachability_debouncing_window: nil, webhooks_from_rest_enabled: nil); end
end
class Twilio::REST::Sync::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def acl_enabled; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def documents; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def links; end
  def reachability_debouncing_enabled; end
  def reachability_debouncing_window; end
  def reachability_webhooks_enabled; end
  def sid; end
  def sync_lists; end
  def sync_maps; end
  def sync_streams; end
  def to_s; end
  def unique_name; end
  def update(webhook_url: nil, friendly_name: nil, reachability_webhooks_enabled: nil, acl_enabled: nil, reachability_debouncing_enabled: nil, reachability_debouncing_window: nil, webhooks_from_rest_enabled: nil); end
  def url; end
  def webhook_url; end
  def webhooks_from_rest_enabled; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def stream_messages; end
  def to_s; end
  def update(ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessageList < Twilio::REST::ListResource
  def create(data: nil); end
  def initialize(version, service_sid: nil, stream_sid: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessagePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamContext::StreamMessageInstance < Twilio::REST::InstanceResource
  def data; end
  def initialize(version, payload, service_sid: nil, stream_sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentContext < Twilio::REST::InstanceContext
  def delete; end
  def document_permissions(identity = nil); end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(data: nil, ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, document_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, document_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentContext::DocumentPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def document_sid; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, document_sid: nil, identity: nil); end
  def inspect; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListList < Twilio::REST::ListResource
  def create(unique_name: nil, ttl: nil, collection_ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def sync_list_items(index = nil); end
  def sync_list_permissions(identity = nil); end
  def to_s; end
  def update(ttl: nil, collection_ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_list_items; end
  def sync_list_permissions; end
  def to_s; end
  def unique_name; end
  def update(ttl: nil, collection_ttl: nil); end
  def url; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapList < Twilio::REST::ListResource
  def create(unique_name: nil, ttl: nil, collection_ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def sync_map_items(key = nil); end
  def sync_map_permissions(identity = nil); end
  def to_s; end
  def update(ttl: nil, collection_ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def sync_map_items; end
  def sync_map_permissions; end
  def to_s; end
  def unique_name; end
  def update(ttl: nil, collection_ttl: nil); end
  def url; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemList < Twilio::REST::ListResource
  def create(key: nil, data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, map_sid: nil); end
  def list(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def page(order: nil, from: nil, bounds: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, map_sid, key); end
  def inspect; end
  def to_s; end
  def update(data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapItemInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, map_sid: nil, key: nil); end
  def inspect; end
  def key; end
  def map_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
  def url; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, map_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, map_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncMapContext::SyncMapPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, map_sid: nil, identity: nil); end
  def inspect; end
  def manage; end
  def map_sid; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemList < Twilio::REST::ListResource
  def create(data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, list_sid: nil); end
  def list(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def page(order: nil, from: nil, bounds: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(order: nil, from: nil, bounds: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, list_sid, index); end
  def inspect; end
  def to_s; end
  def update(data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListItemInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def index; end
  def initialize(version, payload, service_sid: nil, list_sid: nil, index: nil); end
  def inspect; end
  def list_sid; end
  def revision; end
  def service_sid; end
  def to_s; end
  def update(data: nil, ttl: nil, item_ttl: nil, collection_ttl: nil); end
  def url; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, list_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, list_sid, identity); end
  def inspect; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncListContext::SyncListPermissionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def delete; end
  def fetch; end
  def identity; end
  def initialize(version, payload, service_sid: nil, list_sid: nil, identity: nil); end
  def inspect; end
  def list_sid; end
  def manage; end
  def read; end
  def service_sid; end
  def to_s; end
  def update(read: nil, write: nil, manage: nil); end
  def url; end
  def write; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamList < Twilio::REST::ListResource
  def create(unique_name: nil, ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::SyncStreamInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def service_sid; end
  def sid; end
  def stream_messages; end
  def to_s; end
  def unique_name; end
  def update(ttl: nil); end
  def url; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentList < Twilio::REST::ListResource
  def create(unique_name: nil, data: nil, ttl: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Sync::V1::ServiceContext::DocumentInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def created_by; end
  def data; end
  def date_created; end
  def date_expires; end
  def date_updated; end
  def delete; end
  def document_permissions; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def revision; end
  def service_sid; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(data: nil, ttl: nil); end
  def url; end
end
class Twilio::REST::Accounts::V1 < Twilio::REST::Version
  def credentials; end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList < Twilio::REST::ListResource
  def aws(sid = nil); end
  def initialize(version); end
  def public_key(sid = nil); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList::PublicKeyList < Twilio::REST::ListResource
  def create(public_key: nil, friendly_name: nil, account_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList::PublicKeyPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList::PublicKeyContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Accounts::V1::CredentialList::PublicKeyInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
end
class Twilio::REST::Accounts::V1::CredentialList::AwsList < Twilio::REST::ListResource
  def create(credentials: nil, friendly_name: nil, account_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList::AwsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Accounts::V1::CredentialList::AwsContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil); end
end
class Twilio::REST::Accounts::V1::CredentialList::AwsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def update(friendly_name: nil); end
  def url; end
end
class Twilio::REST::Wireless::V1 < Twilio::REST::Version
  def commands(sid = nil); end
  def initialize(domain); end
  def rate_plans(sid = nil); end
  def sims(sid = nil); end
  def to_s; end
  def usage_records; end
end
class Twilio::REST::Wireless::V1::UsageRecordList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(end_: nil, start: nil, granularity: nil, limit: nil, page_size: nil); end
  def page(end_: nil, start: nil, granularity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(end_: nil, start: nil, granularity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::UsageRecordPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::UsageRecordInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def commands; end
  def data; end
  def initialize(version, payload); end
  def inspect; end
  def period; end
  def to_s; end
end
class Twilio::REST::Wireless::V1::RatePlanList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, data_enabled: nil, data_limit: nil, data_metering: nil, messaging_enabled: nil, voice_enabled: nil, national_roaming_enabled: nil, international_roaming: nil, national_roaming_data_limit: nil, international_roaming_data_limit: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::RatePlanPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::RatePlanContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil, friendly_name: nil); end
end
class Twilio::REST::Wireless::V1::RatePlanInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def data_enabled; end
  def data_limit; end
  def data_metering; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def international_roaming; end
  def international_roaming_data_limit; end
  def messaging_enabled; end
  def national_roaming_data_limit; end
  def national_roaming_enabled; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, friendly_name: nil); end
  def url; end
  def voice_enabled; end
end
class Twilio::REST::Wireless::V1::CommandList < Twilio::REST::ListResource
  def create(command: nil, sim: nil, callback_method: nil, callback_url: nil, command_mode: nil, include_sid: nil, delivery_receipt_requested: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(sim: nil, status: nil, direction: nil, transport: nil, limit: nil, page_size: nil); end
  def page(sim: nil, status: nil, direction: nil, transport: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(sim: nil, status: nil, direction: nil, transport: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::CommandPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::CommandContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Wireless::V1::CommandInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def command; end
  def command_mode; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def delivery_receipt_requested; end
  def direction; end
  def fetch; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def sid; end
  def sim_sid; end
  def status; end
  def to_s; end
  def transport; end
  def url; end
end
class Twilio::REST::Wireless::V1::SimContext < Twilio::REST::InstanceContext
  def data_sessions; end
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil, callback_method: nil, callback_url: nil, friendly_name: nil, rate_plan: nil, status: nil, commands_callback_method: nil, commands_callback_url: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, reset_status: nil); end
  def usage_records; end
end
class Twilio::REST::Wireless::V1::SimContext::UsageRecordList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, sim_sid: nil); end
  def list(end_: nil, start: nil, granularity: nil, limit: nil, page_size: nil); end
  def page(end_: nil, start: nil, granularity: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(end_: nil, start: nil, granularity: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimContext::UsageRecordPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimContext::UsageRecordInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def commands; end
  def data; end
  def initialize(version, payload, sim_sid: nil); end
  def inspect; end
  def period; end
  def sim_sid; end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimContext::DataSessionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, sim_sid: nil); end
  def list(end_: nil, start: nil, limit: nil, page_size: nil); end
  def page(end_: nil, start: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(end_: nil, start: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimContext::DataSessionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimContext::DataSessionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def cell_id; end
  def cell_location_estimate; end
  def end_; end
  def imei; end
  def initialize(version, payload, sim_sid: nil); end
  def inspect; end
  def last_updated; end
  def operator_country; end
  def operator_mcc; end
  def operator_mnc; end
  def operator_name; end
  def packets_downloaded; end
  def packets_uploaded; end
  def radio_link; end
  def sid; end
  def sim_sid; end
  def start; end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, limit: nil, page_size: nil); end
  def page(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(status: nil, iccid: nil, rate_plan: nil, e_id: nil, sim_registration_code: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Wireless::V1::SimInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def commands_callback_method; end
  def commands_callback_url; end
  def context; end
  def data_sessions; end
  def date_created; end
  def date_updated; end
  def delete; end
  def e_id; end
  def fetch; end
  def friendly_name; end
  def iccid; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def ip_address; end
  def links; end
  def rate_plan_sid; end
  def reset_status; end
  def sid; end
  def sms_fallback_method; end
  def sms_fallback_url; end
  def sms_method; end
  def sms_url; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, callback_method: nil, callback_url: nil, friendly_name: nil, rate_plan: nil, status: nil, commands_callback_method: nil, commands_callback_url: nil, sms_fallback_method: nil, sms_fallback_url: nil, sms_method: nil, sms_url: nil, voice_fallback_method: nil, voice_fallback_url: nil, voice_method: nil, voice_url: nil, reset_status: nil); end
  def url; end
  def usage_records; end
  def voice_fallback_method; end
  def voice_fallback_url; end
  def voice_method; end
  def voice_url; end
end
class Twilio::REST::Voice::V1 < Twilio::REST::Version
  def dialing_permissions; end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList < Twilio::REST::ListResource
  def bulk_country_updates; end
  def countries(iso_code = nil); end
  def initialize(version); end
  def settings; end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdateList < Twilio::REST::ListResource
  def create(update_request: nil); end
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdatePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::BulkCountryUpdateInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
  def update_count; end
  def update_request; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(iso_code: nil, continent: nil, country_code: nil, low_risk_numbers_enabled: nil, high_risk_special_numbers_enabled: nil, high_risk_tollfraud_numbers_enabled: nil, limit: nil, page_size: nil); end
  def page(iso_code: nil, continent: nil, country_code: nil, low_risk_numbers_enabled: nil, high_risk_special_numbers_enabled: nil, high_risk_tollfraud_numbers_enabled: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(iso_code: nil, continent: nil, country_code: nil, low_risk_numbers_enabled: nil, high_risk_special_numbers_enabled: nil, high_risk_tollfraud_numbers_enabled: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext < Twilio::REST::InstanceContext
  def fetch; end
  def highrisk_special_prefixes; end
  def initialize(version, iso_code); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryInstance < Twilio::REST::InstanceResource
  def context; end
  def continent; end
  def country_codes; end
  def fetch; end
  def high_risk_special_numbers_enabled; end
  def high_risk_tollfraud_numbers_enabled; end
  def highrisk_special_prefixes; end
  def initialize(version, payload, iso_code: nil); end
  def inspect; end
  def iso_code; end
  def links; end
  def low_risk_numbers_enabled; end
  def name; end
  def to_s; end
  def url; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, iso_code: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::CountryContext::HighriskSpecialPrefixInstance < Twilio::REST::InstanceResource
  def initialize(version, payload, iso_code: nil); end
  def inspect; end
  def prefix; end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsList < Twilio::REST::ListResource
  def initialize(version); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version); end
  def inspect; end
  def to_s; end
  def update(dialing_permissions_inheritance: nil); end
end
class Twilio::REST::Voice::V1::DialingPermissionsList::SettingsInstance < Twilio::REST::InstanceResource
  def context; end
  def dialing_permissions_inheritance; end
  def fetch; end
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
  def update(dialing_permissions_inheritance: nil); end
  def url; end
end
class Twilio::REST::Voice::V1::DialingPermissionsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Voice::V1::DialingPermissionsInstance < Twilio::REST::InstanceResource
  def initialize(version, payload); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Proxy::V1 < Twilio::REST::Version
  def initialize(domain); end
  def services(sid = nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceList < Twilio::REST::ListResource
  def create(unique_name: nil, default_ttl: nil, callback_url: nil, geo_match_level: nil, number_selection_behavior: nil, intercept_callback_url: nil, out_of_session_callback_url: nil, chat_instance_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServicePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, sid); end
  def inspect; end
  def phone_numbers(sid = nil); end
  def sessions(sid = nil); end
  def short_codes(sid = nil); end
  def to_s; end
  def update(unique_name: nil, default_ttl: nil, callback_url: nil, geo_match_level: nil, number_selection_behavior: nil, intercept_callback_url: nil, out_of_session_callback_url: nil, chat_instance_sid: nil); end
end
class Twilio::REST::Proxy::V1::ServiceInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def callback_url; end
  def chat_instance_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def default_ttl; end
  def delete; end
  def fetch; end
  def geo_match_level; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def intercept_callback_url; end
  def links; end
  def number_selection_behavior; end
  def out_of_session_callback_url; end
  def phone_numbers; end
  def sessions; end
  def short_codes; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, default_ttl: nil, callback_url: nil, geo_match_level: nil, number_selection_behavior: nil, intercept_callback_url: nil, out_of_session_callback_url: nil, chat_instance_sid: nil); end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionList < Twilio::REST::ListResource
  def create(unique_name: nil, date_expiry: nil, ttl: nil, mode: nil, status: nil, participants: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def interactions(sid = nil); end
  def participants(sid = nil); end
  def to_s; end
  def update(date_expiry: nil, ttl: nil, status: nil); end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def closed_reason; end
  def context; end
  def date_created; end
  def date_ended; end
  def date_expiry; end
  def date_last_interaction; end
  def date_started; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def interactions; end
  def links; end
  def mode; end
  def participants; end
  def service_sid; end
  def sid; end
  def status; end
  def to_s; end
  def ttl; end
  def unique_name; end
  def update(date_expiry: nil, ttl: nil, status: nil); end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantList < Twilio::REST::ListResource
  def create(identifier: nil, friendly_name: nil, proxy_identifier: nil, proxy_identifier_sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, session_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, session_sid, sid); end
  def inspect; end
  def message_interactions(sid = nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def date_created; end
  def date_deleted; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def identifier; end
  def initialize(version, payload, service_sid: nil, session_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def message_interactions; end
  def proxy_identifier; end
  def proxy_identifier_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionList < Twilio::REST::ListResource
  def create(body: nil, media_url: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, session_sid: nil, participant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, service_sid, session_sid, participant_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::ParticipantContext::MessageInteractionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def data; end
  def date_created; end
  def date_updated; end
  def fetch; end
  def inbound_participant_sid; end
  def inbound_resource_sid; end
  def inbound_resource_status; end
  def inbound_resource_type; end
  def inbound_resource_url; end
  def initialize(version, payload, service_sid: nil, session_sid: nil, participant_sid: nil, sid: nil); end
  def inspect; end
  def outbound_participant_sid; end
  def outbound_resource_sid; end
  def outbound_resource_status; end
  def outbound_resource_type; end
  def outbound_resource_url; end
  def participant_sid; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def type; end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionList < Twilio::REST::ListResource
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil, session_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, session_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::SessionContext::InteractionInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def context; end
  def data; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def inbound_participant_sid; end
  def inbound_resource_sid; end
  def inbound_resource_status; end
  def inbound_resource_type; end
  def inbound_resource_url; end
  def initialize(version, payload, service_sid: nil, session_sid: nil, sid: nil); end
  def inspect; end
  def outbound_participant_sid; end
  def outbound_resource_sid; end
  def outbound_resource_status; end
  def outbound_resource_type; end
  def outbound_resource_url; end
  def service_sid; end
  def session_sid; end
  def sid; end
  def to_s; end
  def type; end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberList < Twilio::REST::ListResource
  def create(sid: nil, phone_number: nil, is_reserved: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(is_reserved: nil); end
end
class Twilio::REST::Proxy::V1::ServiceContext::PhoneNumberInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def friendly_name; end
  def in_use; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_reserved; end
  def iso_country; end
  def phone_number; end
  def service_sid; end
  def sid; end
  def to_s; end
  def update(is_reserved: nil); end
  def url; end
end
class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeList < Twilio::REST::ListResource
  def create(sid: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, service_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::ShortCodePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, service_sid, sid); end
  def inspect; end
  def to_s; end
  def update(is_reserved: nil); end
end
class Twilio::REST::Proxy::V1::ServiceContext::ShortCodeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def capabilities; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, service_sid: nil, sid: nil); end
  def inspect; end
  def is_reserved; end
  def iso_country; end
  def service_sid; end
  def short_code; end
  def sid; end
  def to_s; end
  def update(is_reserved: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1 < Twilio::REST::Version
  def assistants(sid = nil); end
  def initialize(domain); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext < Twilio::REST::InstanceContext
  def defaults; end
  def delete; end
  def dialogues(sid = nil); end
  def fetch; end
  def field_types(sid = nil); end
  def initialize(version, sid); end
  def inspect; end
  def model_builds(sid = nil); end
  def queries(sid = nil); end
  def style_sheet; end
  def tasks(sid = nil); end
  def to_s; end
  def update(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, style_sheet: nil, defaults: nil, development_stage: nil); end
  def webhooks(sid = nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil, actions: nil, actions_url: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def fields(sid = nil); end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def samples(sid = nil); end
  def statistics; end
  def task_actions; end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil, actions: nil, actions_url: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def actions_url; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def fields; end
  def friendly_name; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def samples; end
  def sid; end
  def statistics; end
  def task_actions; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil, actions: nil, actions_url: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::WebhookList < Twilio::REST::ListResource
  def create(unique_name: nil, events: nil, webhook_url: nil, webhook_method: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::WebhookPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::WebhookContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil, events: nil, webhook_url: nil, webhook_method: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::WebhookInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def events; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil, events: nil, webhook_url: nil, webhook_method: nil); end
  def url; end
  def webhook_method; end
  def webhook_url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid); end
  def inspect; end
  def to_s; end
  def update(defaults: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DefaultsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil); end
  def inspect; end
  def to_s; end
  def update(defaults: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid); end
  def inspect; end
  def to_s; end
  def update(style_sheet: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::StyleSheetInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil); end
  def inspect; end
  def to_s; end
  def update(style_sheet: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildList < Twilio::REST::ListResource
  def create(status_callback: nil, unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(unique_name: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::ModelBuildInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def build_duration; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def error_code; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def status; end
  def to_s; end
  def unique_name; end
  def update(unique_name: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeList < Twilio::REST::ListResource
  def create(unique_name: nil, friendly_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def field_values(sid = nil); end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(friendly_name: nil, unique_name: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_values; end
  def friendly_name; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def links; end
  def sid; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, unique_name: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueList < Twilio::REST::ListResource
  def create(language: nil, value: nil, synonym_of: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, field_type_sid: nil); end
  def list(language: nil, limit: nil, page_size: nil); end
  def page(language: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValuePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, field_type_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::FieldTypeContext::FieldValueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type_sid; end
  def initialize(version, payload, assistant_sid: nil, field_type_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def sid; end
  def synonym_of; end
  def to_s; end
  def url; end
  def value; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleList < Twilio::REST::ListResource
  def create(language: nil, tagged_text: nil, source_channel: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def list(language: nil, limit: nil, page_size: nil); end
  def page(language: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SamplePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, task_sid, sid); end
  def inspect; end
  def to_s; end
  def update(language: nil, tagged_text: nil, source_channel: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::SampleInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def sid; end
  def source_channel; end
  def tagged_text; end
  def task_sid; end
  def to_s; end
  def update(language: nil, tagged_text: nil, source_channel: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldList < Twilio::REST::ListResource
  def create(field_type: nil, unique_name: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, task_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::FieldInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def field_type; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def task_sid; end
  def to_s; end
  def unique_name; end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, task_sid); end
  def inspect; end
  def to_s; end
  def update(actions: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskActionsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil); end
  def inspect; end
  def task_sid; end
  def to_s; end
  def update(actions: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil, task_sid: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, task_sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::TaskContext::TaskStatisticsInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def fetch; end
  def fields_count; end
  def initialize(version, payload, assistant_sid: nil, task_sid: nil); end
  def inspect; end
  def samples_count; end
  def task_sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::QueryList < Twilio::REST::ListResource
  def create(language: nil, query: nil, tasks: nil, model_build: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version, assistant_sid: nil); end
  def list(language: nil, model_build: nil, status: nil, limit: nil, page_size: nil); end
  def page(language: nil, model_build: nil, status: nil, page_token: nil, page_number: nil, page_size: nil); end
  def stream(language: nil, model_build: nil, status: nil, limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::QueryPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::QueryContext < Twilio::REST::InstanceContext
  def delete; end
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
  def update(sample_sid: nil, status: nil); end
end
class Twilio::REST::Autopilot::V1::AssistantContext::QueryInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def date_created; end
  def date_updated; end
  def delete; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def language; end
  def model_build_sid; end
  def query; end
  def results; end
  def sample_sid; end
  def sid; end
  def source_channel; end
  def status; end
  def to_s; end
  def update(sample_sid: nil, status: nil); end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DialogueList < Twilio::REST::ListResource
  def initialize(version, assistant_sid: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DialoguePage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DialogueContext < Twilio::REST::InstanceContext
  def fetch; end
  def initialize(version, assistant_sid, sid); end
  def inspect; end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantContext::DialogueInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def assistant_sid; end
  def context; end
  def data; end
  def fetch; end
  def initialize(version, payload, assistant_sid: nil, sid: nil); end
  def inspect; end
  def sid; end
  def to_s; end
  def url; end
end
class Twilio::REST::Autopilot::V1::AssistantList < Twilio::REST::ListResource
  def create(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, style_sheet: nil, defaults: nil); end
  def each; end
  def get_page(target_url); end
  def initialize(version); end
  def list(limit: nil, page_size: nil); end
  def page(page_token: nil, page_number: nil, page_size: nil); end
  def stream(limit: nil, page_size: nil); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantPage < Twilio::REST::Page
  def get_instance(payload); end
  def initialize(version, response, solution); end
  def to_s; end
end
class Twilio::REST::Autopilot::V1::AssistantInstance < Twilio::REST::InstanceResource
  def account_sid; end
  def callback_events; end
  def callback_url; end
  def context; end
  def date_created; end
  def date_updated; end
  def defaults; end
  def delete; end
  def development_stage; end
  def dialogues; end
  def fetch; end
  def field_types; end
  def friendly_name; end
  def initialize(version, payload, sid: nil); end
  def inspect; end
  def latest_model_build_sid; end
  def links; end
  def log_queries; end
  def model_builds; end
  def needs_model_build; end
  def queries; end
  def sid; end
  def style_sheet; end
  def tasks; end
  def to_s; end
  def unique_name; end
  def update(friendly_name: nil, log_queries: nil, unique_name: nil, callback_url: nil, callback_events: nil, style_sheet: nil, defaults: nil, development_stage: nil); end
  def url; end
  def webhooks; end
end
