# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/forme/all/forme.rbi
#
# forme-1.7.0

module Forme
  def self.attr_classes(attr, *classes); end
  def self.default_add_blank_prompt; end
  def self.default_add_blank_prompt=(arg0); end
  def self.default_config; end
  def self.default_config=(arg0); end
  def self.form(*a, &block); end
  def self.merge_classes(*classes); end
  def self.raw(s); end
  def self.register_config(type, hash); end
  def self.register_transformer(type, sym, obj = nil, &block); end
  def self.transform(type, trans_name, default_opts, *args, &block); end
  def self.transformer(type, trans, default_opts = nil); end
  def self.version; end
end
class Forme::Form
  def <<(tag); end
  def _input(*a); end
  def _inputs(inputs = nil, opts = nil); end
  def _tag(*a, &block); end
  def button(opts = nil); end
  def close; end
  def copy_inputs_wrapper_from_wrapper(input_opts, output_opts = nil); end
  def each_obj(objs, namespace = nil); end
  def emit(tag); end
  def form(attr = nil, &block); end
  def hidden_form_tags(form_tag); end
  def hidden_tags; end
  def initialize(obj = nil, opts = nil); end
  def input(field, opts = nil); end
  def input_defaults; end
  def inputs(inputs = nil, opts = nil, &block); end
  def namespaces; end
  def nest(tag); end
  def obj; end
  def open(attr); end
  def opts; end
  def parse_hidden_tags(hidden_tag); end
  def raw(s); end
  def raw_output(s); end
  def self.form(obj = nil, attr = nil, opts = nil, &block); end
  def self.new(obj = nil, opts = nil); end
  def serialize_close(tag); end
  def serialize_open(tag); end
  def serializer; end
  def tag(*a, &block); end
  def tag_(*a, &block); end
  def with_obj(obj, namespace = nil); end
  def with_opts(opts); end
end
class Forme::Input
  def form; end
  def form_opts; end
  def format; end
  def initialize(form, type, opts = nil); end
  def opts; end
  def tag(*a, &block); end
  def to_s; end
  def type; end
end
class Forme::Tag
  def <<(child); end
  def attr; end
  def children; end
  def form; end
  def initialize(form, type, attr = nil, children = nil); end
  def parse_children(children); end
  def tag(*a, &block); end
  def to_s; end
  def type; end
end
module Forme::Raw
end
class Forme::RawString < String
  include Forme::Raw
end
class Forme::ErrorHandler
  def call(tag, input); end
end
class Forme::Formatter
  def _add_set_error(tags); end
  def _format_date_select(values, order); end
  def _format_input(type); end
  def _format_select_optgroup(group, options); end
  def _format_set(type, tag_attrs = nil); end
  def _format_set_optgroup(group, options); end
  def attr; end
  def call(input); end
  def convert_to_tag(type); end
  def copy_boolean_options_to_attributes(keys); end
  def copy_options_to_attributes(keys); end
  def form; end
  def format_checkbox; end
  def format_checkboxset; end
  def format_date; end
  def format_datetime; end
  def format_radio; end
  def format_radioset; end
  def format_select; end
  def format_textarea; end
  def handle_key_option; end
  def input; end
  def namespaced_id(field); end
  def namespaced_name(field, multiple = nil); end
  def namespaces; end
  def normalize_options; end
  def opts; end
  def process_select_optgroups(grouper, &block); end
  def process_select_options(os); end
  def self.call(input); end
  def set_label; end
  def set_value_from_namespaced_values(namespaces, values, key); end
  def tag(type, attr = nil, children = nil); end
  def wrap(type, tag); end
  def wrap_tag(tag); end
  def wrap_tag_with_error(tag); end
  def wrap_tag_with_label(tag); end
end
class Forme::Formatter::Disabled < Forme::Formatter
  def format_checkbox; end
  def normalize_options; end
end
class Forme::Formatter::ReadOnly < Forme::Formatter
  def _format_input(type); end
  def format_checkbox; end
  def format_radio; end
  def format_select; end
  def format_submit; end
  def format_textarea; end
end
class Forme::Helper
  def call(tag, input); end
end
class Forme::InputsWrapper
  def call(form, opts); end
end
class Forme::InputsWrapper::FieldSetOL < Forme::InputsWrapper
  def call(form, opts); end
end
class Forme::InputsWrapper::OL
  def call(form, opts, &block); end
end
class Forme::InputsWrapper::Div
  def call(form, opts, &block); end
end
class Forme::InputsWrapper::TR
  def call(form, opts, &block); end
end
class Forme::InputsWrapper::Table
  def call(form, opts, &block); end
end
class Forme::Labeler
  def call(tag, input); end
end
class Forme::Labeler::Explicit
  def call(tag, input); end
end
class Forme::Serializer
  def attr_html(attr); end
  def attr_value(v); end
  def call(tag); end
  def format_date(date); end
  def format_time(time); end
  def h(string); end
  def serialize_close(tag); end
  def serialize_open(tag); end
end
class Forme::Serializer::AmericanTime < Forme::Serializer
  def call(tag); end
  def format_date(date); end
  def format_time(time); end
end
class Forme::Serializer::PlainText
  def call(tag); end
end
class Forme::Wrapper
  def call(tag, input); end
end
class Forme::Wrapper::Tag < Forme::Wrapper
  def call(tag, input); end
  def initialize(type); end
end
class Forme::Wrapper::TableRow < Forme::Wrapper
  def call(tag, input); end
end
class Forme::Error < StandardError
end
