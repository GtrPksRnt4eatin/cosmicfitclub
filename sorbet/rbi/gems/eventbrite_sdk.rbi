# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/eventbrite_sdk/all/eventbrite_sdk.rbi
#
# eventbrite_sdk-3.4.0

module EventbriteSDK
  def self.base_url; end
  def self.base_url=(url); end
  def self.delete(params); end
  def self.format_request(params); end
  def self.get(params); end
  def self.post(params); end
  def self.request(params); end
  def self.token; end
  def self.token=(api_token); end
  def self.url(path); end
  def self.verify_ssl=(verifies); end
  def self.verify_ssl?; end
end
class EventbriteSDK::EventbriteAPIError < RuntimeError
  def initialize(msg = nil, response = nil); end
  def message; end
  def parsed_error; end
  def response; end
  def response_value(key, fallback: nil); end
  def status_code; end
end
class EventbriteSDK::BadRequest < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::Forbidden < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::InvalidAttribute < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::InternalServerError < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::ResourceNotFound < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::Unauthorized < EventbriteSDK::EventbriteAPIError
end
class EventbriteSDK::Resource
  def delete(request: nil, api_token: nil); end
  def initialize(hydrated_attrs = nil); end
  def inspect; end
  def new?; end
  def read_attribute_for_serialization(attribute); end
  def refresh!(request: nil, api_token: nil); end
  def reload(hydrated_attrs = nil); end
  def resource_class_from_string(klass); end
  def save(postfixed_path = nil, api_token: nil, request: nil); end
  def self.build(attrs); end
  def self.define_api_actions(*actions); end
  def to_json(opts = nil); end
  extend EventbriteSDK::Resource::Operations::AttributeSchema::ClassMethods
  extend EventbriteSDK::Resource::Operations::Endpoint::ClassMethods
  extend EventbriteSDK::Resource::Operations::Relationships::ClassMethods
  include EventbriteSDK::Resource::Operations::AttributeSchema
  include EventbriteSDK::Resource::Operations::Endpoint
  include EventbriteSDK::Resource::Operations::Endpoint::InstanceMethods
  include EventbriteSDK::Resource::Operations::Relationships
  include EventbriteSDK::Resource::Operations::Relationships::InstanceMethods
end
module EventbriteSDK::Resource::Operations
end
module EventbriteSDK::Resource::Operations::AttributeSchema
  def self.included(receiver); end
end
module EventbriteSDK::Resource::Operations::AttributeSchema::ClassMethods
  def attributes_prefix(prefix); end
  def prefix; end
  def schema; end
  def schema_definition(&block); end
end
module EventbriteSDK::Resource::Operations::AttributeSchema::InstanceMethods
  def [](arg); end
  def assign_attributes(arg); end
  def attrs; end
  def build_attrs(new_attrs); end
  def changed?; end
  def changes; end
  def method_missing(method_name, *_args, &_block); end
  def respond_to_missing?(method_name, _include_private = nil); end
end
module EventbriteSDK::Resource::Operations::List
  def list(query: nil); end
end
module EventbriteSDK::Resource::Operations::Endpoint
  def self.included(receiver); end
end
module EventbriteSDK::Resource::Operations::Endpoint::ClassMethods
  def define_path_methods; end
  def path(is_create = nil); end
  def resource_path(path); end
  def retrieve(params, request = nil); end
end
module EventbriteSDK::Resource::Operations::Endpoint::InstanceMethods
  def full_url(request = nil); end
  def path(postfixed_path = nil); end
end
module EventbriteSDK::Resource::Operations::Relationships
  def self.included(receiver); end
end
module EventbriteSDK::Resource::Operations::Relationships::ClassMethods
  def belongs_to(rel_method, object_class:); end
  def has_many(rel_method, object_class: nil, key: nil); end
end
module EventbriteSDK::Resource::Operations::Relationships::InstanceMethods
  def build_relative(name, klass); end
  def list_class(resource_list_rel); end
  def relationships; end
  def reset_memoized_relationships; end
end
class EventbriteSDK::Resource::Attributes
  def [](key); end
  def assign_attributes(new_attrs); end
  def attrs; end
  def changed?; end
  def changes; end
  def handle_requested_attr(value); end
  def initialize(hydrated_attrs = nil, schema = nil); end
  def inspect; end
  def method_missing(method_name, *_args, &_block); end
  def payload(prefix = nil); end
  def reset!; end
  def respond_to_missing?(method_name, _include_private = nil); end
  def schema; end
  def self.build(attrs, schema); end
  def stringify_keys(params); end
  def to_h; end
  def to_json(opts = nil); end
  def values; end
end
class EventbriteSDK::Resource::NullSchemaDefinition
  def defined_keys; end
  def dirty_comparable(field); end
  def writeable?(_key); end
end
class EventbriteSDK::Resource::SchemaDefinition
  def add_field(_options, value, method); end
  def add_field_options(opts, value, _method); end
  def attrs; end
  def boolean(value, *opts); end
  def boolean_expansion(val); end
  def comparable; end
  def currency(value, *opts); end
  def currency_expansion(value); end
  def datetime(value, *opts); end
  def datetime_expansion(value); end
  def defined_keys; end
  def dirty_comparable(field); end
  def generic_expansion(types, value); end
  def initialize(resource_name); end
  def integer(value, *opts); end
  def integer_expansion(val); end
  def multipart(value, *opts); end
  def multipart_expansion(value); end
  def read_only?(key); end
  def read_only_keys; end
  def resource_name; end
  def string(value, *opts); end
  def string_expansion(val); end
  def type(key); end
  def utc(value, *opts); end
  def utc_expansion(val); end
  def whitelisted_attribute?(key); end
  def writeable?(key); end
end
class EventbriteSDK::BlankResourceList
  def [](*args, &block); end
  def concat(other); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def initialize(key: nil); end
  def next_page; end
  def object_count; end
  def page(_num); end
  def page_count; end
  def page_number; end
  def page_size; end
  def prev_page; end
  def retrieve; end
  def to_ary(*args, &block); end
  def to_json(opts = nil); end
  def with_expansion(*_args); end
  extend Forwardable
  include Enumerable
end
class EventbriteSDK::Resource::Field
  def apply(attrs, existing_changes); end
  def basic_changes(attrs, changes); end
  def bury(hash = nil); end
  def changes(attrs, changes); end
  def datetime; end
  def initial_value; end
  def initialize(key, value, prefix: nil, schema: nil); end
  def key; end
  def keys; end
  def rich_changes(attrs, changes); end
  def schema; end
  def sister; end
  def sister_change(attrs); end
  def sister_field; end
  def value; end
  def writeable?; end
end
class EventbriteSDK::Resource::FieldComparable
  def value_for(type, field); end
end
class EventbriteSDK::ResourceList
  def [](*args, &block); end
  def concat(other); end
  def continuation; end
  def continue(continuation_token: nil, api_token: nil); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def expansion; end
  def has_more_items; end
  def initialize(url_base: nil, object_class: nil, key: nil, query: nil, request: nil); end
  def key; end
  def load_response(api_token); end
  def next_page(api_token: nil); end
  def object_class; end
  def object_count; end
  def objects; end
  def page(num, api_token: nil); end
  def page_count; end
  def page_number; end
  def page_size; end
  def pagination; end
  def prev_page(api_token: nil); end
  def query; end
  def request; end
  def retrieve(query: nil, api_token: nil); end
  def to_ary; end
  def to_json(opts = nil); end
  def url_base; end
  def with_expansion(*args); end
  extend Forwardable
  include Enumerable
end
module EventbriteSDK::Lists
end
class EventbriteSDK::Lists::OwnedEventOrdersList < EventbriteSDK::ResourceList
  def search(term); end
  def term_provided_false(_term); end
  def term_provided_true(term); end
end
class EventbriteSDK::Attendee < EventbriteSDK::Resource
  def attendees; end
  def id; end
  def order; end
  def order_id; end
end
class EventbriteSDK::Category < EventbriteSDK::Resource
  def id; end
  extend EventbriteSDK::Resource::Operations::List
end
class EventbriteSDK::Event < EventbriteSDK::Resource
  def attendees; end
  def cancel(opts = nil); end
  def id; end
  def list!; end
  def orders; end
  def organizer; end
  def over?; end
  def publish(opts = nil); end
  def self.search(params); end
  def ticket_classes; end
  def ticket_groups; end
  def unlist!; end
  def unpublish(opts = nil); end
  def venue; end
end
class EventbriteSDK::Media < EventbriteSDK::Resource
  def eventbrite_upload(file, instructions); end
  def file; end
  def get_instructions(image_type, request = nil); end
  def id; end
  def image_type; end
  def notify(upload_token, request = nil); end
  def upload!(image_type, file); end
end
class EventbriteSDK::Order < EventbriteSDK::Resource
  def attendees; end
  def event; end
  def id; end
  def refund(opts = nil); end
  def resend_confirmation_email(opts = nil); end
end
class EventbriteSDK::Organizer < EventbriteSDK::Resource
  def events; end
  def id; end
end
class EventbriteSDK::Report
  def date_facet(value); end
  def end_date(value); end
  def event_ids(*ids); end
  def event_status(value); end
  def filter_by(filters); end
  def group_by(value); end
  def initialize; end
  def query; end
  def retrieve(type = nil, sdk = nil); end
  def start_date(value); end
  def timezone(value); end
end
class EventbriteSDK::Subcategory < EventbriteSDK::Resource
  def id; end
  extend EventbriteSDK::Resource::Operations::List
end
class EventbriteSDK::TicketClass < EventbriteSDK::Resource
  def available?; end
  def available_in_the_future?; end
  def change(attrs); end
  def event; end
  def event_id; end
  def hide!; end
  def id; end
  def ticket_groups; end
  def unhide!; end
end
class EventbriteSDK::TicketGroup < EventbriteSDK::Resource
  def archived?; end
  def deleted?; end
  def id; end
  def live?; end
end
class EventbriteSDK::User < EventbriteSDK::Resource
  def id; end
  def organizers; end
  def owned_event_orders; end
  def owned_events; end
  def self.me; end
  def ticket_groups; end
  def unverify(opts = nil); end
  def verify(opts = nil); end
end
class EventbriteSDK::Venue < EventbriteSDK::Resource
  def id; end
  def organizer; end
end
class EventbriteSDK::Webhook < EventbriteSDK::Resource
  def id; end
  extend EventbriteSDK::Resource::Operations::List
end
