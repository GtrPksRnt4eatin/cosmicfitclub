# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/postmark/all/postmark.rbi
#
# postmark-1.10.0

module Postmark
  def api_client; end
  def api_client=(arg0); end
  def api_key; end
  def api_key=(arg0); end
  def api_token; end
  def api_token=(arg0); end
  def configure; end
  def deliver_message(*args); end
  def deliver_messages(*args); end
  def delivery_stats(*args); end
  def host; end
  def host=(arg0); end
  def http_open_timeout; end
  def http_open_timeout=(arg0); end
  def http_read_timeout; end
  def http_read_timeout=(arg0); end
  def max_retries; end
  def max_retries=(arg0); end
  def path_prefix; end
  def path_prefix=(arg0); end
  def port; end
  def port=(arg0); end
  def proxy_host; end
  def proxy_host=(arg0); end
  def proxy_pass; end
  def proxy_pass=(arg0); end
  def proxy_port; end
  def proxy_port=(arg0); end
  def proxy_user; end
  def proxy_user=(arg0); end
  def response_parser_class; end
  def response_parser_class=(arg0); end
  def secure; end
  def secure=(arg0); end
  def send_through_postmark(*args); end
  extend Postmark
end
module Postmark::Inflector
  def camel_case_regexp; end
  def capitalize_first_letter(str); end
  def to_postmark(name); end
  def to_ruby(name); end
  extend Postmark::Inflector
end
module Postmark::HashHelper
  def enhance_with_compatibility_warning(hash); end
  def to_postmark(hash); end
  def to_ruby(hash, compatible = nil); end
  extend Postmark::HashHelper
end
module Postmark::MessageHelper
  def attachments_to_postmark(attachments); end
  def encode_in_base64(data); end
  def headers_to_postmark(headers); end
  def to_postmark(message = nil); end
  def wrap_in_array(object); end
  extend Postmark::MessageHelper
end
class Postmark::MailMessageConverter
  def cast_to_bool(val); end
  def content_part; end
  def convert; end
  def delete_blank_fields(message_hash); end
  def headers_part; end
  def initialize(message); end
  def run; end
end
class Postmark::Bounce
  def activate; end
  def bounced_at; end
  def can_activate?; end
  def description; end
  def details; end
  def dump; end
  def dump_available?; end
  def email; end
  def id; end
  def inactive?; end
  def initialize(values = nil); end
  def message_id; end
  def name; end
  def self.all(options = nil); end
  def self.find(id); end
  def self.tags; end
  def server_id; end
  def subject; end
  def tag; end
  def type; end
end
module Postmark::Inbound
  def to_ruby_hash(inbound); end
  extend Postmark::Inbound
end
module Postmark::Json
  def self.decode(data); end
  def self.encode(data); end
  def self.json_parser; end
end
class Postmark::HttpClient
  def api_key; end
  def api_key=(arg0); end
  def api_token; end
  def api_token=(arg0); end
  def apply_options(options = nil); end
  def auth_header_name; end
  def build_http; end
  def delete(path, query = nil); end
  def do_request; end
  def error(clazz, response_body); end
  def error_message(response_body); end
  def error_message_and_code(response_body); end
  def get(path, query = nil); end
  def handle_response(response); end
  def headers; end
  def host; end
  def http; end
  def http_open_timeout; end
  def http_read_timeout; end
  def initialize(api_token, options = nil); end
  def path_prefix; end
  def port; end
  def post(path, data = nil); end
  def protocol; end
  def proxy_host; end
  def proxy_pass; end
  def proxy_port; end
  def proxy_user; end
  def put(path, data = nil); end
  def secure; end
  def to_query_string(hash); end
  def url; end
  def url_path(path); end
end
class Postmark::Client
  def api_key=(api_token); end
  def api_token=(api_token); end
  def find_each(path, name, options = nil); end
  def format_response(response, compatible = nil); end
  def get_resource_count(path, options = nil); end
  def http_client; end
  def initialize(api_token, options = nil); end
  def load_batch(path, name, options); end
  def max_retries; end
  def serialize(data); end
  def take_response_of; end
  def with_retries; end
end
class Postmark::ApiClient < Postmark::Client
  def activate_bounce(id); end
  def bounces(options = nil); end
  def create_template(attributes = nil); end
  def create_trigger(type, options); end
  def delete_template(id); end
  def delete_trigger(type, id); end
  def deliver(message_hash = nil); end
  def deliver_in_batches(message_hashes); end
  def deliver_message(message); end
  def deliver_messages(messages); end
  def deliver_with_template(attributes = nil); end
  def delivery_stats; end
  def dump_bounce(id); end
  def dump_message(id, options = nil); end
  def extract_messages_path_and_params(options = nil); end
  def get_bounce(id); end
  def get_bounced_tags; end
  def get_bounces(options = nil); end
  def get_for_message(action, id, options = nil); end
  def get_message(id, options = nil); end
  def get_messages(options = nil); end
  def get_messages_count(options = nil); end
  def get_opens(options = nil); end
  def get_opens_by_message_id(message_id, options = nil); end
  def get_stats_counts(stat, options = nil); end
  def get_stats_totals(options = nil); end
  def get_template(id); end
  def get_templates(options = nil); end
  def get_trigger(type, id); end
  def get_triggers(type, options = nil); end
  def in_batches(messages); end
  def initialize(api_token, options = nil); end
  def max_batch_size; end
  def max_batch_size=(arg0); end
  def messages(options = nil); end
  def opens(options = nil); end
  def opens_by_message_id(message_id, options = nil); end
  def server_info; end
  def templates(options = nil); end
  def triggers(type, options = nil); end
  def update_message(message, response); end
  def update_server_info(attributes = nil); end
  def update_template(id, attributes = nil); end
  def update_trigger(type, id, options); end
  def validate_template(attributes = nil); end
end
class Postmark::AccountApiClient < Postmark::Client
  def create_domain(attributes = nil); end
  def create_sender(attributes = nil); end
  def create_server(attributes = nil); end
  def create_signature(attributes = nil); end
  def delete_domain(id); end
  def delete_sender(id); end
  def delete_server(id); end
  def delete_signature(id); end
  def domains(options = nil); end
  def get_domain(id); end
  def get_domains(options = nil); end
  def get_domains_count(options = nil); end
  def get_sender(id); end
  def get_senders(options = nil); end
  def get_senders_count(options = nil); end
  def get_server(id); end
  def get_servers(options = nil); end
  def get_servers_count(options = nil); end
  def get_signature(id); end
  def get_signatures(options = nil); end
  def get_signatures_count(options = nil); end
  def initialize(api_token, options = nil); end
  def request_new_sender_dkim(id); end
  def request_new_signature_dkim(id); end
  def resend_sender_confirmation(id); end
  def resend_signature_confirmation(id); end
  def rotate_domain_dkim(id); end
  def senders(options = nil); end
  def servers(options = nil); end
  def signatures(options = nil); end
  def update_domain(id, attributes = nil); end
  def update_sender(id, attributes = nil); end
  def update_server(id, attributes = nil); end
  def update_signature(id, attributes = nil); end
  def verified_domain_spf?(id); end
  def verified_sender_spf?(id); end
  def verified_signature_spf?(id); end
end
module Mail
end
class Mail::Message
  def body_html; end
  def body_text; end
  def bogus_headers; end
  def delivered; end
  def delivered=(arg0); end
  def delivered?; end
  def export_attachments; end
  def export_headers; end
  def export_native_attachments; end
  def html?; end
  def pack_attachment_data(data); end
  def postmark_attachments; end
  def postmark_attachments=(value); end
  def postmark_response; end
  def postmark_response=(arg0); end
  def tag(val = nil); end
  def tag=(val); end
  def text?; end
  def to_postmark_hash; end
  def track_links(val = nil); end
  def track_links=(val); end
  def track_opens(val = nil); end
  def track_opens=(val); end
end
class Mail::Postmark
  def deliver!(mail); end
  def initialize(values); end
  def settings; end
  def settings=(arg0); end
end
class Postmark::DeliveryError < StandardError
  def error_code; end
  def error_code=(arg0); end
  def full_response; end
  def full_response=(arg0); end
  def initialize(message = nil, error_code = nil, full_response = nil); end
end
class Postmark::UnknownError < Postmark::DeliveryError
end
class Postmark::InvalidApiKeyError < Postmark::DeliveryError
end
class Postmark::InvalidMessageError < Postmark::DeliveryError
end
class Postmark::InternalServerError < Postmark::DeliveryError
end
class Postmark::UnknownMessageType < Postmark::DeliveryError
end
class Postmark::TimeoutError < Postmark::DeliveryError
end
module Postmark::ResponseParsers
end
