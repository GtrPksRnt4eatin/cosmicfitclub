# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jwt/all/jwt.rbi
#
# jwt-1.5.6

module JWT
  def asn1_to_raw(signature, public_key); end
  def base64url_decode(str); end
  def base64url_encode(str); end
  def decode(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def decode_verify_signature(key, header, signature, signing_input, options, &keyfinder); end
  def decoded_segments(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def encode(payload, key, algorithm = nil, header_fields = nil); end
  def encoded_header(algorithm = nil, header_fields = nil); end
  def encoded_payload(payload); end
  def encoded_signature(signing_input, key, algorithm); end
  def raw_to_asn1(signature, private_key); end
  def secure_compare(a, b); end
  def self.asn1_to_raw(signature, public_key); end
  def self.base64url_decode(str); end
  def self.base64url_encode(str); end
  def self.decode(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def self.decode_verify_signature(key, header, signature, signing_input, options, &keyfinder); end
  def self.decoded_segments(jwt, key = nil, verify = nil, custom_options = nil, &keyfinder); end
  def self.encode(payload, key, algorithm = nil, header_fields = nil); end
  def self.encoded_header(algorithm = nil, header_fields = nil); end
  def self.encoded_payload(payload); end
  def self.encoded_signature(signing_input, key, algorithm); end
  def self.raw_to_asn1(signature, private_key); end
  def self.secure_compare(a, b); end
  def self.sign(algorithm, msg, key); end
  def self.sign_ecdsa(algorithm, msg, private_key); end
  def self.sign_hmac(algorithm, msg, key); end
  def self.sign_rsa(algorithm, msg, private_key); end
  def self.signature_algorithm_and_key(header, key, &keyfinder); end
  def self.verify_ecdsa(algorithm, public_key, signing_input, signature); end
  def self.verify_rsa(algorithm, public_key, signing_input, signature); end
  def self.verify_signature(algo, key, signing_input, signature); end
  def self.verify_signature_algo(algo, key, signing_input, signature); end
  def sign(algorithm, msg, key); end
  def sign_ecdsa(algorithm, msg, private_key); end
  def sign_hmac(algorithm, msg, key); end
  def sign_rsa(algorithm, msg, private_key); end
  def signature_algorithm_and_key(header, key, &keyfinder); end
  def verify_ecdsa(algorithm, public_key, signing_input, signature); end
  def verify_rsa(algorithm, public_key, signing_input, signature); end
  def verify_signature(algo, key, signing_input, signature); end
  def verify_signature_algo(algo, key, signing_input, signature); end
  extend JWT::Json
  extend JWT::Json
end
module JWT::Json
  def decode_json(encoded); end
  def encode_json(raw); end
end
class JWT::DecodeError < StandardError
end
class JWT::VerificationError < JWT::DecodeError
end
class JWT::ExpiredSignature < JWT::DecodeError
end
class JWT::IncorrectAlgorithm < JWT::DecodeError
end
class JWT::ImmatureSignature < JWT::DecodeError
end
class JWT::InvalidIssuerError < JWT::DecodeError
end
class JWT::InvalidIatError < JWT::DecodeError
end
class JWT::InvalidAudError < JWT::DecodeError
end
class JWT::InvalidSubError < JWT::DecodeError
end
class JWT::InvalidJtiError < JWT::DecodeError
end
class JWT::InvalidPayload < JWT::DecodeError
end
class JWT::Verify
  def extract_option(key); end
  def initialize(payload, options); end
  def leeway; end
  def self.verify_aud(payload, options); end
  def self.verify_expiration(payload, options); end
  def self.verify_iat(payload, options); end
  def self.verify_iss(payload, options); end
  def self.verify_jti(payload, options); end
  def self.verify_not_before(payload, options); end
  def self.verify_sub(payload, options); end
  def verify_aud; end
  def verify_aud_array(audience, options_aud); end
  def verify_expiration; end
  def verify_iat; end
  def verify_iss; end
  def verify_jti; end
  def verify_not_before; end
  def verify_sub; end
end
class JWT::Decode
  def decode_header_and_payload(header_segment, payload_segment); end
  def decode_segments; end
  def header; end
  def initialize(jwt, key, verify, options, &keyfinder); end
  def payload; end
  def raw_segments(jwt, verify); end
  def self.base64url_decode(str); end
  def signature; end
  def verify; end
end
